treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
library(ape)
library(amap)
library(lattice)
library(ggplot2)
library(ggdendro)
library(pheatmap)
rm(list = ls())
setwd("~/Dropbox/AD")
setwd("~/Dropbox/GitHub/Ad")
setwd("~/Dropbox/GitHub/Ad/data")
load(file = "complete_tpm.rdt")
brain.tpm <- brain.tpm[, c(grep("2014", colnames(brain.tpm)), grep("mouse", colnames(brain.tpm)))]
brain.tpm <- brain.tpm[apply(brain.tpm, 1, function (x) max(x) > 5), ]
brain.tpm <- log2(brain.tpm + 1)
mycol <- rep("chartreuse3", ncol(brain.tpm))
mycol[grep("mouse", colnames(brain.tpm))] <- "firebrick"
hc1 <- hcluster(t(brain.tpm), method = "pearson", link = "average")  # clust samples
plot(as.phylo(hc1), type = "unrooted", tip.color = mycol, cex = .5, font = 2, lab4ut = "axial")
mycol <- rep("dodgerblue3", ncol(brain.tpm))
mycol[grep("mouse", colnames(brain.tpm))] <- "firebrick"
hc1 <- hcluster(t(brain.tpm), method = "pearson", link = "average")  # clust samples
plot(as.phylo(hc1), type = "unrooted", tip.color = mycol, cex = .5, font = 2, lab4ut = "axial")
plot(as.phylo(hc1), type = "unrooted", tip.color = mycol, cex = .5, font = 1, lab4ut = "axial")
plot(as.phylo(hc1), type = "unrooted", tip.color = mycol, cex = .9, font = 1, lab4ut = "axial")
plot(as.phylo(hc1), type = "unrooted", tip.color = mycol, cex = .6, font = 1, lab4ut = "axial")
brain.tpm1 <- brain.tpm[apply(brain.tpm, 1, function(x) max(x) - min(x) > 1), ]
par(mfrow = c(2, 1), mar = c(2, 4, 1, 2))
plot(brain.tpm1$WT6m1484.2014 - brain.tpm1$APP5m1558.2014, ylim = c(-6, 6), xlab = "", ylab = "")
title("WT6m1484 - APP5m1558", line = -2, col.main = "firebrick1")
abline(0, 0, lwd = 1, col = "firebrick1")
plot(brain.tpm1$APP5m1559.2014 - brain.tpm1$APP5m2633.2014, ylim = c(-6, 6), xlab = "", ylab = "")
title("APP5m1559 - APP5m2633", line = -2, col.main = "firebrick1" )
abline(0, 0, lwd = 1, col = "firebrick1")
brain.tpm <- brain.tpm[, -grep("APP5m1559.2014", colnames(brain.tpm))]
hist(c(brain.tpm))
head(brain.tpm)
hist(c(as.matrix(brain.tpm)))
?par
library(ape)
library(amap)
library(ggdendro)
library(MASS)
library(xtable)
library(ggplot2)
library(pheatmap)
library(grid)
library(mygene)
setwd("~/Dropbox/GitHub/Ad/data")
setwd("~/Dropbox/GitHub/Ad/data")
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad/data")
load("brain2014.rdt")
hist(brain.tpm[, 1])
par(mfrow = c(2, 1), mar = c(2, 4, 1, 2))
dev.off()
hist(c(as.matrix(brain.tpm)))
par(mfrow = c(2, 1), mar = c(2, 4, 1, 2))
hist(c(as.matrix(brain.tpm)))
dev.off()
hist(c(as.matrix(brain.tpm)))
dt <- brain.tpm
cutoff <- quantile(c(as.matrix(dt)), 0.25)  # TPM level
dt <- dt[apply(dt, 1, function(x) max(x) > cutoff), ]
dt <- dt[apply(dt, 1, function(x) sum(x > 0) > round(ncol(dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(dt)), levels = c("WT", "APP"))
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(dt)), levels = c("2014", "mouse"))
uid <- paste(age, group, sep = "_")
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
fit <- list()
glm.dt <- as.matrix(dt)
for (i in 1:nrow(glm.dt)) {
if (i %% 1e3 == 0) cat(i, "\n")
y <- glm.dt[i, ]
fit0 <- lm(y ~ age + group + batch + age * group)
fit[[i]] <- summary(fit0)
}
dt.bc <- dt
for (i in 1:nrow(dt.bc))
dt.bc[i, ] <- dt[i, ] - fit[[i]]$coefficients["batchmouse", "Estimate"] * (as.numeric(batch) - 1)
names(fit) <- rownames(glm.dt)
save(dt.bc, age, group, uid, conditions, file = "bc2014.rdt")
save(fit, file = "glm_fit.rdt")
fit.est <- NULL
for (id in names(fit))
fit.est <- rbind(fit.est, fit[[id]]$coefficients[, "Estimate"])
rownames(fit.est) <- names(fit)
svd.dt <- fit.est
svd <- svd(svd.dt)
str(svd)
svd$v
head(fit.est)
rownames(svd$v) <- colnames(svd.dt)
dev.off()
barplot(svd$d)
barplot(svd$v[, 1], main = paste("PC", 1), las = 2)
abline(h = 0)
par(mfrow = c(3, 3))
for (i in 1:ncol(svd$v)) barplot(svd$v[, i], main = paste("PC", i), las = 2)
svd$d
svd <- svd(svd.dt[, -c(1, 6)])
svd$d
svd.dt <- fit.est
svd <- svd(svd.dt)
rownames(svd$v) <- colnames(svd.dt)
r2 <- sapply(fit, function (x) x$r.squared)
fval <- sapply(fit, function (x) x$fstatistic)
pval <- apply(fval, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
qval <- p.adjust(pval, method = "fdr")
geneId <- names(fit)[qval < 0.05 & r2 > 0.5]
fit <- fit[geneId]
fit.est <- NULL
fit.pval <- NULL
for (id in geneId) {
fit.pval <- rbind(fit.pval, fit[[id]]$coefficients[, "Pr(>|t|)"])
fit.est <- rbind(fit.est, fit[[id]]$coefficients[, "Estimate"])
}
rownames(fit.pval) <- rownames(fit.est) <- geneId
head(fit.pval)
head(fit.est)
sel <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.est, 2, function (x) abs(x) > 0.2)
str(sel)
rm(sel)
logit <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.est, 2, function (x) abs(x) > 0.2)
geneId.age <- geneId[as.logical(rowSums(logit[, grep("age", colnames(fit.pval))]))]
geneId.app <- geneId[as.logical(rowSums(logit[, grep("APP", colnames(fit.pval))]))]
geneId.age
geneId.app
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad/data")
load("bc2014.rdt")
age
dt <- dt.bc
colnames(dt)
month = "2m"
tpm <- dt[, age == month]
head(tpm)
dt <- dt.bc
de.month <- list()
for (month in c("2m", "4m", "5m", "6m")) {
cat(month, "\n")
dt1 <- dt[, grep(month, age)]
dt1.wt <- dt1[, grep("WT", colnames(dt1))]
dt1.app <- dt1[, grep("APP", colnames(dt1))]
fc <- rowMeans(dt1.app) - rowMeans(dt1.wt)
treat <- gsub("^.*(WT|APP).*", "\\1", colnames(dt1))
tt.pval <- apply(dt1, 1, function(x) pairwise.t.test(x, treat, p.adj = "none")$p.value)
tt.qval <- p.adjust(tt.pval, method = "fdr")
idx <- which(tt.pval < 0.05)
name <- paste("DE", month, sep = "")
de.month[[name]] <- cbind(FC = fc, PVAL = tt.pval, QVAL = tt.qval)[idx, ]
}  # lm() and pairwise.t.test() do same
str(de.month)
head(de.month[[4]])
dt <- dt[apply(dt, 1, sd) > 0.1, ]
head(dt)
de.month <- list()
for (month in c("2m", "4m", "5m", "6m")) {
cat(month, "\n")
dt1 <- dt[, grep(month, age)]
dt1.wt <- dt1[, grep("WT", colnames(dt1))]
dt1.app <- dt1[, grep("APP", colnames(dt1))]
fc <- rowMeans(dt1.app) - rowMeans(dt1.wt)
treat <- gsub("^.*(WT|APP).*", "\\1", colnames(dt1))
tt.pval <- apply(dt1, 1, function(x) pairwise.t.test(x, treat, p.adj = "none")$p.value)
tt.qval <- p.adjust(tt.pval, method = "fdr")
idx <- which(tt.qval < 0.05)
name <- paste("DE", month, sep = "")
de.month[[name]] <- cbind(FC = fc, PVAL = tt.pval, QVAL = tt.qval)[idx, ]
}  # lm() and pairwise.t.test() do same
str(de.month)
de.month[[4]]
de.month[[1]]
de.month[[2]]
de.month[[3]]
uid
conditions
str(wt2m)
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad/data")
load("bc2014.rdt")
dt <- dt.bc
wt2m <- rowMeans(dt[, uid == "2m_WT"])
str(wt2m)
app2m <- rowMeans(dt[, uid == "2m_APP"])
wt456m <- dt[, uid %in% c("4m_WT", "5m_WT", "6m_WT")]
app456m <- dt[, uid %in% c("4m_APP", "5m_APP", "6m_APP")]
wt456m <- wt456m - wt2m
app456m <- app456m - app2m
head(wt456m)
dt <- cbind(wt456m, app456m)
dt <- cbind(wt456m, app456m)
col.manual <- c("firebrick1", "chartreuse3", "dodgerblue3", "gold1", "darkorchid2")
hc1 <- hcluster(t(dt), method = "pearson", link = "average")
clusts = cutree(hc1, 4)
plot(as.phylo(hc1), type = "unrooted", tip.color = col.manual[clusts], cex = .5, font = 2, lab4ut = "axial")
dev.off()
plot(as.phylo(hc1), type = "unrooted", tip.color = col.manual[clusts], cex = .5, font = 2, lab4ut = "axial")
hc1 <- hcluster(t(dt), method = "pearson", link = "average")
dev.off()
plot(as.phylo(hc1), type = "unrooted", cex = .5, font = 2, lab4ut = "axial")
pool <- c("4m", "5m", "6m")
dt <- dt[apply(dt, 1, sd) > 0.1, ]
de.month <- list()
for (month in pool) {
cat(month, "\n")
dt1 <- dt[, grep(month, age)]
dt1.wt <- dt1[, grep("WT", colnames(dt1))]
dt1.app <- dt1[, grep("APP", colnames(dt1))]
fc <- rowMeans(dt1.app) - rowMeans(dt1.wt)
treat <- gsub("^.*(WT|APP).*", "\\1", colnames(dt1))
tt.pval <- apply(dt1, 1, function(x) pairwise.t.test(x, treat, p.adj = "none")$p.value)
tt.qval <- p.adjust(tt.pval, method = "fdr")
idx <- which(tt.qval < 0.05)
name <- paste("DE", month, sep = "")
de.month[[name]] <- cbind(FC = fc, PVAL = tt.pval, QVAL = tt.qval)[idx, ]
}  # lm() and
de.month <- list()
for (month in pool) {
cat(month, "\n")
dt1 <- dt[, grep(month, colnames(dt))]
dt1.wt <- dt1[, grep("WT", colnames(dt1))]
dt1.app <- dt1[, grep("APP", colnames(dt1))]
fc <- rowMeans(dt1.app) - rowMeans(dt1.wt)
treat <- gsub("^.*(WT|APP).*", "\\1", colnames(dt1))
tt.pval <- apply(dt1, 1, function(x) pairwise.t.test(x, treat, p.adj = "none")$p.value)
tt.qval <- p.adjust(tt.pval, method = "fdr")
idx <- which(tt.qval < 0.05)
name <- paste("DE", month, sep = "")
de.month[[name]] <- cbind(FC = fc, PVAL = tt.pval, QVAL = tt.qval)[idx, ]
}  # lm() and pairwise.t.test() do same
str(de.month)
ls()
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad/data")
load(file = "complete_tpm.rdt")
col.manual <- c("grey70", "firebrick1", "chartreuse3", "dodgerblue3", "gold1", "darkorchid2")
# --- 2014 samples only
brain.tpm <- brain.tpm[, c(grep("2014", colnames(brain.tpm)), grep("mouse", colnames(brain.tpm)))]
brain.tpm <- brain.tpm[apply(brain.tpm, 1, function (x) max(x) > 5), ]
brain.tpm <- log2(brain.tpm + 1)
mycol <- rep("dodgerblue3", ncol(brain.tpm))
mycol[grep("mouse", colnames(brain.tpm))] <- "firebrick"
hc1 <- hcluster(t(brain.tpm), method = "pearson", link = "average")  # clust samples
rm(list = ls())
