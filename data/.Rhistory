geom_hline(y = 0, color = "grey20") +
theme_bw() + xlab("") + ylab("Gene Number") +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme(panel.border = element_rect(size = 1, color = "grey20")) +
theme(axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 10, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
?barplot
graph.dt <- rbind(DE4m = table(DE.month$DE4m[, "FC"] > 0),
DE5m = table(DE.month$DE5m[, "FC"] > 0),
DE6m = table(DE.month$DE6m[, "FC"] > 0))
graph.dt
barplot(graph.dt, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(t(graph.dt), main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
col.manual <- c("firebrick1", "grey70")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 2250), axes = F)
col.manual <- c("dodgerblue3", "firebrick1")
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 30, labels = consequence, font = 2, col = "grey20")
text(x = bar, y = t(graph.dt) + 30, labels = t(graph.dt), font = 2, col = "grey20")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 30, labels = t(graph.dt), font = 2, col = "grey20")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
pdf(file = "~/Dropbox/AD/Graphs/gene_number.pdf", width = 4)
# op <- par(mar = c(15, 4, 4, 2))
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
bar <- barplot(t(graph.dt), las = 3, col = col.manual, width = 0.5, border = NA, ylim = c(0, 200), axes = F, beside = T)
?barplot
bar <- barplot(t(graph.dt), las = 3, col = col.manual, space = 0.5, border = NA, ylim = c(0, 200), axes = F, beside = T)
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
graph.dt
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey70")
pdf(file = "~/Dropbox/AD/Graphs/gene_number.pdf", width = 4)
# op <- par(mar = c(15, 4, 4, 2))
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 1, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
pdf(file = "~/Dropbox/AD/Graphs/gene_number.pdf", width = 4)
# op <- par(mar = c(15, 4, 4, 2))
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), las = 3, col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 2, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
pdf(file = "~/Dropbox/AD/Graphs/gene_number.pdf", width = 4)
# op <- par(mar = c(15, 4, 4, 2))
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 2, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
venn.diagram(list(DE4m = rownames(DE.month$DE4m),
DE5m = rownames(DE.month$DE5m),
DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
file = "~/Dropbox/AD/Graphs/venn1.tiff")
?venn.diagram
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), font = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), sub.fontface = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), sub.fontface = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), alpha = 1, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
label.col = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 1, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold", cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold",
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
x = "DE4m"
DE.month$x
DE.month$"x"
DE.month$DE4m
DE.month[[x]]
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "."), "txt", sep = "."))
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "/"), "txt", sep = "."))
rm(list = ls())
library(maSigPro)
load("~/Dropbox/AD/R/batch2014.rdt")
str(dt)
colnames(dt)
data(edesign.abiotic)
edesign.abiotic
treat <- rep("WT", ncol(dt))
treat[grep("APP", colnames(dt))] <- "APP"
month <- rep("4m", ncol(dt))
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?do.recall
?do.call
x = c(1:5) > 3
all(x)
x = c(1:5) > 0
all(x)
?load
?save
library(hexbin)
x <- rnorm(1000)
y <- rnorm(1000)
bin<-hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning")
install.packages("hexbin")
library(hexbin)
x <- rnorm(1000)
y <- rnorm(1000)
bin<-hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning")
plot(x, y)
remove.packages("hexbin")
?png
xx = list()
xx[[1]] = 1
x[[2]] = 3
do.call(c, xx)
do.call(function (x) c(x), xx)
do.call(function (x) x^2, xx)
xx[[2]] = 3
do.call(c, xx)
do.call(function (x) x^2, xx)
do.call("function (x) x^2", xx)
sapply(xx, c)
sapply(xx, function (x) x^2)
source("http://bioconductor.org/biocLite.R")
biocLite("snpStats")
library(snpStat)
library(snpStats)
data(ld.example)
ceph.1mb
head(ceph.1mb)
str(ceph.1mb)
ceph.1mb$Data
head(support.ld)
?ld
ld.ceph <- ld(ceph.1mb, stats = c("D.prime", "R.squared"), depth = 1000)
ld.ceph <- ld(ceph.1mb, stats = c("D.prime", "R.squared"), depth = 100)
ld.ceph
str(ld.ceph)
str(ceph.1mb)
image(ld.ceph$D.prime, lwd = 0)
str(ceph.1mb)
x = ceph.1mb@.Data
str(x)
x[1:5, 1:5]
x[1:25, 1:5]
remove.packages("snpStats")
data(ld.example)
source("http://bioconductor.org/biocLite.R")
biocLite("snpMatrix")
library(snpMatrix)
source("http://bioconductor.org/biocLite.R")
biocLite("snpStats")
?read.plink
?ld
f = 1:100 / 200
f
plot(f, f(1-f))
plot(f, f * (1-f))
setwd("~/Dropbox/GitHub/Ad/data")
load(file = "complete_tpm.rdt")
col.manual <- c("grey70", "firebrick1", "chartreuse3", "dodgerblue3", "gold1", "darkorchid2")
# --- 2014 samples only
brain.tpm <- brain.tpm[, c(grep("2014", colnames(brain.tpm)), grep("mouse", colnames(brain.tpm)))]
brain.tpm <- brain.tpm[apply(brain.tpm, 1, function (x) max(x) > 5), ]
brain.tpm <- log2(brain.tpm + 1)
head(brain.tpm)
Ids <- colnames(brain.tpm)
age <- gsub("^.*(2m|4m|5m|6m).*", "\\1", Ids)
group <- gsub("^.*(WT|APP).*", "\\1", Ids)
uid <- paste(age, group, sep = "_")
table(uid)
?table
str(table(samples))
samples <- paste(age, group, sep = "_")
str(table(samples))
table(samples)
table(samples)$samples
library(QTLRel)
?scanOne
head(v)
