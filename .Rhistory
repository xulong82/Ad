dt <- as.data.frame(dt.cond)
n.gene <- nrow(dt)
geneId <- rownames(dt)
str(dt)
similarity <- cor(t(dt), method = "pearson")
sft.beta <- 27
adjacency <- abs(similarity)^sft.beta
tom <- matrix(0, n.gene, n.gene)
rownames(tom) <- colnames(tom) <- geneId
k1 <- rowSums(adjacency)
str(similarity)
for (i in 2:n.gene) {
if (i %% 1e2 == 0) cat(i, "\n")
for (j in 1:(i-1)) {
kij <- min(k1[c(i, j)])
lij <- sum(adjacency[i, ] * adjacency[j, ])
wij <- (lij + adjacency[i, j]) / (kij + 1 - adjacency[i, j])
tom[i, j] <- wij
}
}
diag(tom) <- 1
tom[upper.tri(tom)] <- t(tom)[upper.tri(tom)]
diss.tom <- 1 - tom
dendro <- hclust(as.dist(diss.tom), method = "average")
branch <- cutreeDynamic(dendro = dendro, distM = diss.tom, minClusterSize = 30)
names(branch) <- geneId
table(branch)
eigene <- NULL
branchId <- names(table(branch))[-1]
for (idx in branchId) {
dt1 <- dt[branch == idx, ]
dt1 <- t(apply(dt1, 1, scale))
svd1 <- svd(dt1)
eigene <- rbind(eigene, svd1$v[, 1])
}
dimnames(eigene) <- list(branchId, conditions)
module <- paste("Module", branchId, sep = "")
group <- factor(conditions, levels = conditions)
gdt <- data.frame(value = c(eigene), module = rep(module, 8), group = rep(group, each = 8))
gdt$geno <- factor(gsub("^.*(WT|APP).*", "\\1", gdt$group), levels = c("WT", "APP"))
ggplot(gdt, aes(x = group, y = value, fill = geno)) +
geom_bar(stat = "identity") + facet_grid(. ~ module) +
scale_fill_manual(values = c("red", "blue")) +
theme_bw() + xlab("") + ylab("") +
theme(axis.text.x = element_text(angle = 90))
save(gdt, file = "markdown/eigene.rdt")
x.dt = as.matrix(dt[branch == 6, ])
matplot(t(scale(x.dt)), type = "l")
x.dt <- t(apply(x.dt, 1, scale))
gdt <- data.frame(value = c(x.dt), gene = rep(rownames(x.dt), 8), group = rep(group, each = nrow(x.dt)))
gdt %>% ggvis(~group, ~value, stroke = ~gene) %>% layer_lines() %>% hide_legend("stroke") %>%
add_tooltip(function (x) paste("Gene: ", x$gene), "hover")
save(branch, gdt, file = "markdown/eigene.rdt")
module <- paste("Module", branchId, sep = "")
group <- factor(conditions, levels = conditions)
gdt <- data.frame(value = c(eigene), module = rep(module, 8), group = rep(group, each = 8))
gdt$geno <- factor(gsub("^.*(WT|APP).*", "\\1", gdt$group), levels = c("WT", "APP"))
save(branch, gdt, file = "markdown/eigene.rdt")
x.dt = as.matrix(dt[branch == 6, ])
x.dt <- t(apply(x.dt, 1, scale))
gdt <- data.frame(value = c(x.dt), gene = rep(rownames(x.dt), 8), group = rep(group, each = nrow(x.dt)))
gdt %>% ggvis(~group, ~value, stroke = ~gene) %>% layer_lines() %>% hide_legend("stroke") %>%
add_tooltip(function (x) paste("Gene: ", x$gene), "hover")
save(gdt, file = "markdown/module6.rdt")
module <- paste("Module", branchId, sep = "")
branch
module <- paste("Module", branchId, sep = "")
group <- factor(conditions, levels = conditions)
gdt <- data.frame(value = c(eigene), module = rep(module, 8), group = rep(group, each = 8))
gdt$geno <- factor(gsub("^.*(WT|APP).*", "\\1", gdt$group), levels = c("WT", "APP"))
save(branch, gdt, file = "markdown/eigene.rdt")
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain2014.rdt")
load("./data/retina2014.rdt")
dt <- brain.tpm
dt <- retina.tpm
dt <- brain.tpm
cutoff <- quantile(c(as.matrix(dt)), 0.25)  # TPM level
dt <- dt[apply(dt, 1, function(x) max(x) > cutoff), ]
dt <- dt[apply(dt, 1, function(x) sum(x > 0) > round(ncol(dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(dt)), levels = c("WT", "APP"))
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(dt)), levels = c("2014", "mouse"))
uid <- paste(age, group, sep = "_")
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
glm.dt <- as.matrix(dt)
glm.fit <- lapply(1:nrow(glm.dt), function (x) summary(lm(glm.dt[x, ] ~ age + group + batch + age * group)))
names(glm.fit) <- rownames(glm.dt)
dt.bc <- dt
for (i in 1:nrow(dt.bc))
dt.bc[i, ] <- dt[i, ] - glm.fit[[i]]$coefficients["batchmouse", "Estimate"] * (as.numeric(batch) - 1)
dt.cond <- NULL
for (idx in conditions) dt.cond <- cbind(dt.cond, rowMeans(dt.bc[, uid == idx]))
colnames(dt.cond) <- conditions
r2 <- sapply(glm.fit, function (x) x$r.squared)
fval <- sapply(glm.fit, function (x) x$fstatistic)
pval <- apply(fval, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
qval <- p.adjust(pval, method = "fdr")
fit.qr <- glm.fit[qval < 0.05 & r2 > 0.5]
fit.est <- lapply(glm.fit, function (x) x$coefficients[, "Estimate"])
fit.est <- lapply(fit.qr, function (x) x$coefficients[, "Estimate"])
fit.est <- do.call(rbind, fit.est)
fit.est <- lapply(fit.qr, function (x) x$coefficients[, "Estimate"])
fit.est <- do.call(rbind, fit.est)
fit.pval <- lapply(fit.qr, function (x) x$coefficients[, "Pr(>|t|)"])
fit.pval <- do.call(rbind, fit.pval)
logit <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.est, 2, function (x) abs(x) > 0.2)
geneId.age <- geneId[as.logical(rowSums(logit[, grep("age", colnames(fit.pval))]))]
geneId.app <- geneId[as.logical(rowSums(logit[, grep("APP", colnames(fit.pval))]))]
svd.dt <- fit.est[, -c(1, 6)]
feature <- factor(colnames(svd.dt), levels = colnames(svd.dt))
geneId <- rownames(svd.dt)
PC <- paste("PC", 1:ncol(svd.dt), sep = "")
svd <- svd(svd.dt)
rownames(svd$v) <- feature
colnames(svd$v) <- PC
logit <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.est, 2, function (x) abs(x) > 0.2)
geneId.age <- geneId[as.logical(rowSums(logit[, grep("age", colnames(fit.pval))]))]
geneId.app <- geneId[as.logical(rowSums(logit[, grep("APP", colnames(fit.pval))]))]
save(logit, geneId.age, geneId.app, file = "markdown/logit.rdt")
profile <- logit[geneId.app, grep("APP", colnames(logit))]
profile.str <- apply(profile, 1, function (x) paste(x, collapse = "-"))
profile.table <- sort(table(profile.str))
profile.Id <- names(profile.table)
profile.Id
profile.table
profile.str
profile.Id
save(logit, profile.Id, file = "markdown/logit.rdt")
table(branch)
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain_bc2014.rdt")
dt <- dt.bc
aov.pval <- NULL
for (i in 1:nrow(dt)) {
if (i %% 1e3 == 0) cat(i, "\n")
dat1 <- data.frame(y = as.matrix(dt)[i, ], age, group)
aov <- aov(y ~ age * group, data = dat1)
aov.pval <- c(aov.pval, min(summary(aov)[[1]][["Pr(>F)"]], na.rm = T))
}
dt.cond <- NULL
dt <- dt[aov.pval < 0.05, ]
for (idx in conditions) dt.cond <- cbind(dt.cond, rowMeans(dt[, uid == idx]))
colnames(dt.cond) <- conditions
dt.cond <- dt.cond[apply(dt.cond, 1, sd) > 0.1, ]
dt <- as.data.frame(dt.cond)
n.gene <- nrow(dt)
geneId <- rownames(dt)
str(dt)
similarity <- cor(t(dt), method = "pearson")
diag(similarity) <- 0
sft.beta <- 27
adjacency <- abs(similarity)^sft.beta
tom <- matrix(0, n.gene, n.gene)
rownames(tom) <- colnames(tom) <- geneId
k1 <- rowSums(adjacency)
for (i in 2:n.gene) {
if (i %% 1e2 == 0) cat(i, "\n")
for (j in 1:(i-1)) {
kij <- min(k1[c(i, j)])
lij <- sum(adjacency[i, ] * adjacency[j, ])
wij <- (lij + adjacency[i, j]) / (kij + 1 - adjacency[i, j])
tom[i, j] <- wij
}
}
diag(tom) <- 1
tom[upper.tri(tom)] <- t(tom)[upper.tri(tom)]
diss.tom <- 1 - tom
dendro <- hclust(as.dist(diss.tom), method = "average")
branch <- cutreeDynamic(dendro = dendro, distM = diss.tom, minClusterSize = 30)
names(branch) <- geneId
table(branch)
branch["App"]
length(branch)
tom.mod <- tom[branch == 6, branch == 6]
visant <- exportNetworkToVisANT(tom.mod, file = "./data/visant.txt", weighted = T, threshold = 0)
library(png)
cyt <- exportNetworkToCytoscape(tom.mod, edgeFile = "./data/cytodge.txt", nodeFile = "./data/cytonode.txt",
weighted = TRUE, threshold = 0.02)
geneId
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain2014.rdt")
dt <- brain.tpm
cutoff <- quantile(c(as.matrix(dt)), 0.25)  # TPM level
dt <- dt[apply(dt, 1, function(x) max(x) > cutoff), ]
dt <- dt[apply(dt, 1, function(x) sum(x > 0) > round(ncol(dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(dt)), levels = c("WT", "APP"))
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(dt)), levels = c("2014", "mouse"))
uid <- paste(age, group, sep = "_")
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
# --- GLM regression ---
glm.dt <- as.matrix(dt)
glm.fit <- lapply(1:nrow(glm.dt), function (x) summary(lm(glm.dt[x, ] ~ age + group + batch + age * group)))
names(glm.fit) <- rownames(glm.dt)
dt.bc <- dt
for (i in 1:nrow(dt.bc))
dt.bc[i, ] <- dt[i, ] - glm.fit[[i]]$coefficients["batchmouse", "Estimate"] * (as.numeric(batch) - 1)
dt.cond <- NULL
for (idx in conditions) dt.cond <- cbind(dt.cond, rowMeans(dt.bc[, uid == idx]))
colnames(dt.cond) <- conditions
r2 <- sapply(glm.fit, function (x) x$r.squared)
fval <- sapply(glm.fit, function (x) x$fstatistic)
pval <- apply(fval, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
qval <- p.adjust(pval, method = "fdr")
fit.qr <- glm.fit[qval < 0.05 & r2 > 0.5]
fit.app <- fit.qr[["App"]]
fit.est <- lapply(glm.fit, function (x) x$coefficients[, "Estimate"])
fit.est <- do.call(rbind, fit.est)
fit.est <- lapply(fit.qr, function (x) x$coefficients[, "Estimate"])
fit.est <- do.call(rbind, fit.est)
fit.pval <- lapply(fit.qr, function (x) x$coefficients[, "Pr(>|t|)"])
fit.pval <- do.call(rbind, fit.pval)
geneId
svd.dt <- fit.est[, -c(1, 6)]
feature <- factor(colnames(svd.dt), levels = colnames(svd.dt))
geneId <- rownames(svd.dt)
PC <- paste("PC", 1:ncol(svd.dt), sep = "")
svd <- svd(svd.dt)
rownames(svd$v) <- feature
colnames(svd$v) <- PC
geneId.app
logit <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.est, 2, function (x) abs(x) > 0.2)
geneId.age <- geneId[as.logical(rowSums(logit[, grep("age", colnames(fit.pval))]))]
geneId.app <- geneId[as.logical(rowSums(logit[, grep("APP", colnames(fit.pval))]))]
length(geneId)
dt.hc <- dt.bc[geneId, ]
hc1 <- hcluster(t(dt.hc), method = "pearson", link = "average")
mycol <- rep("grey50", ncol(dt.hc))
mycol[grep("APP", colnames(dt))] <- "firebrick1"
plot(as.phylo(hc1), edge.width = 2, font = 2, cex = 0.7, label.offset = 1e-4, tip.color = mycol, direction = "downward")
dt.hc <- dt.bc[unique(c(geneId.app, geneId.age)), ]
hc1 <- hcluster(t(dt.hc), method = "pearson", link = "average")
mycol <- rep("grey50", ncol(dt.hc))
mycol[grep("APP", colnames(dt))] <- "firebrick1"
plot(as.phylo(hc1), edge.width = 2, font = 2, cex = 0.7, label.offset = 1e-4, tip.color = mycol, direction = "downward")
save(hc1, mycol, file = "./markdown/brain_hc2.rdt")
colnames(dt.hc)
group1<- c("APP5m1558.2014", "APP5m2751.2014", "APP5m1633.2014","APP5m1636.2014","APP6m1684.2014","APP5m1648.2014", "APP5m1623.2014")
group2<- c("mouse3346_6m_APP", "mouse3440_6m_APP", "mouse3351_6m_APP", "mouse6585_6m_APP", "APP5m1647.2014", "APP5m1738.2014")
str(dt.bc)
dim(dt.bc)
dt.g1 <- dt.bc[, group1]
dt.g2 <- dt.bc[, group2]
group2<- c("mouse3346_6m_APP", "mouse3440_6m_APP", "mouse3351_6m_APP", "mouse6585_6m_APP", "APP5m1647.2014", "APP5m1738.2014")
dt.g2 <- dt.bc[, group2]
group2 %in% colnames(dt.bc)
colnames(dt.bc)
group2<- c("mouse_3346_6m_APP", "mouse_3440_6m_APP", "mouse_3351_6m_APP", "mouse_6585_6m_APP", "APP5m1647.2014", "APP5m1738.2014")
dt.g2 <- dt.bc[, group2]
colnames(dt.g1) <- paste("group1", colnames(dt.g1), sep = "_")
colnames(dt.g2) <- paste("group2", colnames(dt.g2), sep = "_")
head(dt.g1)
dt.g12 <- cbind(dt.g1, dt.g2)
head(dt.g12)
fc <- rowMeans(dt.g1) - rowMeans(dt.g2)
treat <- gsub("^.*(group1|group2).*", "\\1", colnames(dt.g12))
tt.pval <- apply(dt.g12, 1, function(x) pairwise.t.test(x, treat, p.adj = "none")$p.value)
tt.qval <- p.adjust(tt.pval, method = "fdr")
idx <- which(tt.qval < 0.05)
length(idx)
head(dt.g12)
geneId <- rownames(dt.g12)[idx]
idx <- which(tt.qval < 0.05 & abs(fc) > 1)
idx <- which(tt.qval < 0.05 & abs(fc) > 0.5)
idx <- which(tt.qval < 0.05 & abs(fc) > 0.2)
geneId <- rownames(dt.g12)[idx]
geneId
goAnn <- get("org.Mm.egGO")
universe <- Lkeys(goAnn)
entrezId <- mget(geneId, org.Mm.egSYMBOL2EG, ifnotfound = NA)
entrezId <- entrezId[! is.na(entrezId)]
entrezId <- as.character(entrezId)
category <- "BP"  # "MF" "CC"
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.01, testDirection = "over")
over = hyperGTest(params)
bp <- summary(over)
head(bp)
myGO <- NULL
for (category in c("BP", "MF", "CC") {
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.01, testDirection = "over")
over = hyperGTest(params)
for (category in c("BP", "MF", "CC")) {
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.01, testDirection = "over")
over = hyperGTest(params)
bp <- summary(over)
myGO <- cbind(myGO, bp$Term[1:10])
}
myGO
colnames(myGO) <- c("BP", "MF", "CC")
rownames(myGO) <- NULL
myGO
keggAnn <- get("org.Mm.egPATH")
universe <- Lkeys(keggAnn)
params <- new("KEGGHyperGParams",
geneIds=entrezId, universeGeneIds=universe, annotation="org.Mm.eg.db",
categoryName="KEGG", pvalueCutoff=0.01, testDirection="over")
over <- hyperGTest(params)
kegg <- summary(over)
kegg
geneId
kegg
glist <- geneIdsByCategory(over)
glist <- sapply(glist, function(x) {y <- mget(x, envir=org.Mm.egSYMBOL); paste(y, collapse=";")})
kegg$Symbols <- glist[as.character(kegg$KEGGID)]
kegg
save(myGO, kegg, file = "markdown/kegg2.rdt")
save(myGO, kegg, file = "markdown/kegg2.rdt")
myGO
rownames(myGO) <- NULL
myGO
kegg
length(geneId)
profile <- logit[geneId.app, grep("age", colnames(logit))]
str(profile)
profile <- logit[geneId.age, grep("age", colnames(logit))]
str(profile)
profile.str <- apply(profile, 1, function (x) paste(x, collapse = "-"))
profile.table <- sort(table(profile.str))
profile.Id <- names(profile.table)
geneId.profile <- list()
for (idx in profile.Id)
geneId.profile[[idx]] <- geneId.age[profile.str == idx]
tile.dt <- NULL
for (i in 1:length(profile.Id))
tile.dt <- rbind(tile.dt, as.logical(unlist(strsplit(profile.Id[i], "-"))))
tile.dt <- data.frame(value = c(tile.dt),
profile = factor(rep(profile.Id, ncol(tile.dt)), levels = profile.Id),
group = factor(rep(colnames(profile), each = nrow(tile.dt)), levels = colnames(profile)))
ggplot(tile.dt, aes(x = group, y = profile, fill = value)) + geom_tile(colour = "white") +
theme_bw() + xlab("") + ylab("") + coord_flip() +
scale_x_discrete(labels = c("2m:APP", "4m:APP", "5m:APP", "6m:APP")) +
# scale_x_discrete(labels = c("4m:WT", "5m:WT", "6m:WT", "4m:APP", "5m:APP", "6m:APP")) +
scale_y_discrete(labels = profile.table) +
scale_fill_manual(values = c("grey80", "firebrick1"))
ggplot(tile.dt, aes(x = group, y = profile, fill = value)) + geom_tile(colour = "white") +
theme_bw() + xlab("") + ylab("") + coord_flip() +
##scale_x_discrete(labels = c("2m:APP", "4m:APP", "5m:APP", "6m:APP")) +
scale_x_discrete(labels = c("4m:WT", "5m:WT", "6m:WT", "4m:APP", "5m:APP", "6m:APP")) +
scale_y_discrete(labels = profile.table) +
scale_fill_manual(values = c("grey80", "firebrick1"))
save(tile.dt, profile.table, file = "./markdown/gdt03.rdt")
head(profile)
dim(profile)
geneId = rownames(profile)
entrezId <- mget(geneId, org.Mm.egSYMBOL2EG, ifnotfound = NA)
entrezId <- entrezId[! is.na(entrezId)]
entrezId <- as.character(entrezId)
universe <- Lkeys(keggAnn)
params <- new("KEGGHyperGParams",
geneIds=entrezId, universeGeneIds=universe, annotation="org.Mm.eg.db",
categoryName="KEGG", pvalueCutoff=0.01, testDirection="over")
over <- hyperGTest(params)
kegg <- summary(over)
kegg
save(kegg, file = "markdown/kegg3.rdt")
glm.fit[["Stat3"]]
fit.stat3 = glm.fit[["Stat3"]]
save(fit.stat3, file = "./markdown/fit_stat3.rdt")
length(geneId.app)
length(geneId.age)
length(union(geneId.app,geneId.age))
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain_bc2014.rdt")
dt <- dt.bc
aov.pval <- NULL
for (i in 1:nrow(dt)) {
if (i %% 1e3 == 0) cat(i, "\n")
dat1 <- data.frame(y = as.matrix(dt)[i, ], age, group)
aov <- aov(y ~ age * group, data = dat1)
aov.pval <- c(aov.pval, min(summary(aov)[[1]][["Pr(>F)"]], na.rm = T))
}
dt.cond <- NULL
dt <- dt[aov.pval < 0.05, ]
for (idx in conditions) dt.cond <- cbind(dt.cond, rowMeans(dt[, uid == idx]))
colnames(dt.cond) <- conditions
dt.cond <- dt.cond[apply(dt.cond, 1, sd) > 0.1, ]
dt <- as.data.frame(dt.cond)
n.gene <- nrow(dt)
geneId <- rownames(dt)
str(dt)
similarity <- cor(t(dt), method = "pearson")
diag(similarity) <- 0
sft.beta <- 27
adjacency <- abs(similarity)^sft.beta
tom <- matrix(0, n.gene, n.gene)
rownames(tom) <- colnames(tom) <- geneId
k1 <- rowSums(adjacency)
for (i in 2:n.gene) {
if (i %% 1e2 == 0) cat(i, "\n")
for (j in 1:(i-1)) {
kij <- min(k1[c(i, j)])
lij <- sum(adjacency[i, ] * adjacency[j, ])
wij <- (lij + adjacency[i, j]) / (kij + 1 - adjacency[i, j])
tom[i, j] <- wij
}
}
diag(tom) <- 1
tom[upper.tri(tom)] <- t(tom)[upper.tri(tom)]
diss.tom <- 1 - tom
dendro <- hclust(as.dist(diss.tom), method = "average")
branch <- cutreeDynamic(dendro = dendro, distM = diss.tom, minClusterSize = 30)
names(branch) <- geneId
table(branch)
head(branch)
geneId.network <- list()
for (idx in 1:8) geneId.network$idx <- names(branch[branch == idx])
geneId.network
geneId.network <- list()
for (idx in 1:8) geneId.network[[idx]] <- names(branch[branch == idx])
geneId.network
lapply(geneId.network, write, "./data/network.txt", append = T, ncolumns = 1e3)
geneId.network[[6]]
x = geneId.network[[6]]
geneId.m6 = geneId.network[[6]]
geneId <- geneId.m6
TF <- read.delim("~/Dropbox/X/TFdb.Riken.txt", header = F, stringsAsFactors = F)$V1
geneId[geneId %in% TF]
goAnn <- get("org.Mm.egGO")
universe <- Lkeys(goAnn)
entrezId <- mget(geneId, org.Mm.egSYMBOL2EG, ifnotfound = NA)
entrezId <- entrezId[! is.na(entrezId)]
entrezId <- as.character(entrezId)
myGO <- NULL
for (category in c("BP", "MF", "CC")) {
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.01, testDirection = "over")
over = hyperGTest(params)
bp <- summary(over)
myGO <- cbind(myGO, bp$Term[1:10])
}
colnames(myGO) <- c("BP", "MF", "CC")
rownames(myGO) <- NULL
keggAnn <- get("org.Mm.egPATH")
universe <- Lkeys(keggAnn)
params <- new("KEGGHyperGParams",
geneIds=entrezId, universeGeneIds=universe, annotation="org.Mm.eg.db",
categoryName="KEGG", pvalueCutoff=0.01, testDirection="over")
over <- hyperGTest(params)
kegg <- summary(over)
myGO
kegg
geneId[geneId %in% TF]
geneId.tf = geneId[geneId %in% TF]
save(geneId, geneId.tf, file = "./markdown/geneIds.rdt")
write(geneId, file = "data/geneId_m6.txt", header = F)
write.table(geneId, file = "data/geneId_m6.txt", header = F)
write(geneId, file = "data/geneId_m6.txt")
ad.alz <- read.delim("./data/alzgene20120917.tsv", stringsAsFactors = F)$Gene
hg2mus <- read.delim("~/Dropbox/X/hg2mus.map", stringsAsFactors = F, header = F)
ad.alz <- hg2mus$V4[match(ad.alz, hg2mus$V1)]
ad.alz <- unique(ad.alz[!is.na(ad.alz)])
ad.alz
ad.kegg <- unique(read.delim("./mmu05010.txt", stringsAsFactors = F, header = F)$V1)
ad.kegg
save(ad.alz, file = "data/alzgene.rdt")
write(ad.alz, file = "data/alzgene.txt")
write(ad.kegg, file = "data/ad_kegg.txt")
glm.fit
load("./data/brain2014.rdt")
dt <- brain.tpm
cutoff <- quantile(c(as.matrix(dt)), 0.25)  # TPM level
dt <- dt[apply(dt, 1, function(x) max(x) > cutoff), ]
dt <- dt[apply(dt, 1, function(x) sum(x > 0) > round(ncol(dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(dt)), levels = c("WT", "APP"))
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(dt)), levels = c("2014", "mouse"))
uid <- paste(age, group, sep = "_")
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
glm.dt <- as.matrix(dt)
glm.fit <- lapply(1:nrow(glm.dt), function (x) summary(lm(glm.dt[x, ] ~ age + group + batch + age * group)))
names(glm.fit) <- rownames(glm.dt)
glm.fit[["Nfyb"]]
glm.fit[["Nfya"]]
fit.nfya = glm.fit[["Nfya"]]
fit.nfya
save(fit.nfya, file = "markdown/fit_nfya.rdt")
length(geneId)
length(alzgene)
length(alz.gene)
length(alz.ad)
length(ad.alz)
Sars2 %in% geneId
Sars2 %in% geneId.m6
load(file = "./data/complete_tpm.rdt")
head(brain.tpm)
brain.tpm["Stat4", ]
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
?read.html
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
shiny::runApp('~/Dropbox/AD/Shiny')
