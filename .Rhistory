abline(0, 0, lwd = 2, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
pdf(file = "~/Dropbox/AD/Graphs/gene_number.pdf", width = 4)
# op <- par(mar = c(15, 4, 4, 2))
col.manual <- c("dodgerblue3", "firebrick1")
bar <- barplot(t(graph.dt), col = col.manual, border = NA, ylim = c(0, 200), axes = F, beside = T)
abline(0, 0, lwd = 2, col = "black")
text(x = bar, y = t(graph.dt) + 10, labels = t(graph.dt), font = 2, col = "grey20")
dev.off()
venn.diagram(list(DE4m = rownames(DE.month$DE4m),
DE5m = rownames(DE.month$DE5m),
DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
file = "~/Dropbox/AD/Graphs/venn1.tiff")
?venn.diagram
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), font = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), sub.fontface = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), sub.fontface = 2, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), alpha = 1, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .9, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
label.col = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 1, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold", cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold",
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
x = "DE4m"
DE.month$x
DE.month$"x"
DE.month$DE4m
DE.month[[x]]
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "."), "txt", sep = "."))
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "/"), "txt", sep = "."))
rm(list = ls())
library(maSigPro)
load("~/Dropbox/AD/R/batch2014.rdt")
str(dt)
colnames(dt)
data(edesign.abiotic)
edesign.abiotic
treat <- rep("WT", ncol(dt))
treat[grep("APP", colnames(dt))] <- "APP"
month <- rep("4m", ncol(dt))
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
library(mygene)
library(RUVSeq)
library(EDASeq)
library(ggplot2)
library(xlsx)
rm(list = ls())
setwd("~/Dropbox/GitHub/FY")
load("tpm.rdt")
data <- data.frame(row.names = tpm.dt$Symbol, tpm.dt[2:ncol(tpm.dt)])
data <- data[apply(data, 1, function (x) length(x[x>5]) > 2), ]
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
save(genes, file = "Shiny/raw.rdt")
sf <- apply(spike[, 2:ncol(spike)], 2, function (x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1])
sf <- c(M1IN = 1, sf)
genes <- t(apply(genes, 1, "/", sf))
save(genes, file = "Shiny/norm.rdt")
head(genes)
uid <- gsub("[123]", "", colnames(genes))
geno <- gsub("^(W|M).*", "\\1", uid)
cond <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
bymean <- NULL
for (idx in cond) bymean <- cbind(bymean, rowMeans(genes[, uid == idx]))
head(bymean)
colnames(bymean) <- cond
head(bymean)
bymean <- cbind(bymean, WPLM2WIN = bymean[, "WPLM"] / bymean[, "WIN"], MPLM2MIN = bymean[, "MPLM"] / bymean[, "MIN"])
head(bymean)
bymean <- NULL
for (idx in cond) bymean <- cbind(bymean, rowMeans(genes[, uid == idx]))
colnames(bymean) <- cond
bymean <- cbind(bymean, WNONP2WIN = bymean[, "WNONP"] / bymean[, "WIN"],
MNONP2MIN = bymean[, "MNONP"] / bymean[, "MIN"],
WPLM2WIN = bymean[, "WPLM"] / bymean[, "WIN"],
MPLM2MIN = bymean[, "MPLM"] / bymean[, "MIN"])
head(bymean)
fc <- NULL
for (idx in cond) fc <- cbind(fc, rowMeans(genes[, uid == idx]))
colnames(fc) <- cond
fc <- cbind(fc, WNONP2WIN = fc[, "WNONP"] / fc[, "WIN"], MNONP2MIN = fc[, "MNONP"] / fc[, "MIN"],
WPLM2WIN = fc[, "WPLM"] / fc[, "WIN"], MPLM2MIN = fc[, "MPLM"] / fc[, "MIN"])
# --- MAP to mol concentration
rm(list = ls())
setwd("~/Dropbox/GitHub/FY")
load("tpm.rdt")
# --- Complete dataset with genes have TPM > 5 in at least 2 samples
data <- data.frame(row.names = tpm.dt$Symbol, tpm.dt[2:ncol(tpm.dt)])
data <- data[apply(data, 1, function (x) length(x[x>5]) > 2), ]
# --- Separate the ERCC spike ins from the others
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
save(genes, file = "Shiny/raw.rdt")
write.xlsx(genes, file = "data.xlsx", sheetName = "RAW", append = T)
sf <- apply(spike[, 2:ncol(spike)], 2, function (x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1])
sf <- c(M1IN = 1, sf)
genes <- t(apply(genes, 1, "/", sf))
save(genes, file = "Shiny/norm.rdt")
write.xlsx(genes, file = "data.xlsx", sheetName = "NEW", append = T)
uid <- gsub("[123]", "", colnames(genes))
geno <- gsub("^(W|M).*", "\\1", uid)
cond <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
fc <- NULL
for (idx in cond) fc <- cbind(fc, rowMeans(genes[, uid == idx]))
colnames(fc) <- cond
fc <- cbind(fc, WNONP2WIN = fc[, "WNONP"] / fc[, "WIN"], MNONP2MIN = fc[, "MNONP"] / fc[, "MIN"],
WPLM2WIN = fc[, "WPLM"] / fc[, "WIN"], MPLM2MIN = fc[, "MPLM"] / fc[, "MIN"])
write.xlsx(fc, file = "data.xlsx", sheetName = "FOLD_CHANGE", append = T)
write.xlsx(as.data.frame(fc), file = "data.xlsx", sheetName = "FOLD_CHANGE", append = T)
write(fc, file = "temp.txt")
write(fc, file = "temp.txt", row.names = T)
write.table(fc, file = "temp.txt", row.names = T)
write.table(fc, file = "temp.txt", quote = F)
hc1 <- hcluster(t(genes), method = "pearson", link = "average")
library(ape)
library(amap)
library(ggplot2)
library(ggdendro)
hc1 <- hcluster(t(genes), method = "pearson", link = "average")
plot(as.phylo(hc1), tip.color = col.manual[clusts], edge.width = 2, font = 2, label.offset = .03)
plot(as.phylo(hc1), edge.width = 2, font = 2, label.offset = .03)
plot(as.phylo(hc1), edge.width = 2, font = 2)
plot(as.phylo(hc1), edge.width = 2, direction = "downward")
nrow(genes)
shiny::runApp('Shiny')
rm(list = ls())
source("function.R")
setwd("~/Dropbox/GitHub/Ad")
source("function.R")
load("data/glm_retina.rdt")  # This also applies to the brain
theId <- theGK <- list()
theId[[1]] <- glm$more$app$symbol_by_pattern
theId[[2]] <- glm$more$age$symbol_by_pattern
theId[[3]] <- glm$less$app$symbol_by_pattern
theId[[4]] <- glm$less$age$symbol_by_pattern
for(i in 1:length(theId)) {
mygk1 <- list()
gene1 <- theId[[i]]
for (j in 3:length(gene1)) {
gene0 <- gene1[[j]]
cat(i, j, length(gene1), "\n")
if (length(gene0) > 1)
mygk1[[j]] <- myGK(gene0)
else
mygk1[[j]] <- "Not tested, only one gene!"
}
theGK[[i]] <- mygk1
}
rm(list = ls())
library(GOstats)
?nsFilter
library(GOstats)
library(KEGG.db)
library(org.Mm.eg.db)
library(Category)
library(pathview)
geneId = c("Gm22405", "Gm26191")
entrezId <- mget(geneId, org.Mm.egSYMBOL2EG, ifnotfound = NA)
entrezId
entrezId <- entrezId[! is.na(entrezId)]
entrezId <- as.character(entrezId)
length(entrezId)
geneId = c("App", "Gm26191")
entrezId <- mget(geneId, org.Mm.egSYMBOL2EG, ifnotfound = NA)
entrezId <- entrezId[! is.na(entrezId)]
entrezId <- as.character(entrezId)
goAnn <- get("org.Mm.egGO")
universe <- Lkeys(goAnn)
for (category in c("BP", "MF", "CC")) {
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.001, testDirection = "over")
over = hyperGTest(params)
go <- summary(over)
glist <- geneIdsByCategory(over)
glist <- sapply(glist, function(x) {y <- mget(x, envir=org.Mm.egSYMBOL); paste(y, collapse=";")})
go$Symbols <- glist[as.character(go[, 1])]
#   if (nrow(go) > 10) go <- go[1:10, ]
mygk[[category]] <- go
}
mygk <- list()
for (category in c("BP", "MF", "CC")) {
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe, annotation = "org.Mm.eg.db",
ontology = category, pvalueCutoff = 0.001, testDirection = "over")
over = hyperGTest(params)
go <- summary(over)
glist <- geneIdsByCategory(over)
glist <- sapply(glist, function(x) {y <- mget(x, envir=org.Mm.egSYMBOL); paste(y, collapse=";")})
go$Symbols <- glist[as.character(go[, 1])]
#   if (nrow(go) > 10) go <- go[1:10, ]
mygk[[category]] <- go
}
mygk
quit()
