pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
132 + 95 + 276 + 113
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
log10(0.05)
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
library(QTLRel)
?scanOe
?scanOne
library(tissuesGeneExpression)
data("tissuesGeneExpression")
library(genefilter)
y = e[,which(tissue=="endometrium")]
head(y)
var = apply(y, 1, var)
qqnorm(var)
lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
library(dplyr)
library(biomaRt)
library(ggplot2)
library(ggvis)
library(KEGGREST)
library(xlsx)
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("data/brain2014.rdt")
glm.dt <- brain.tpm
cutoff <- quantile(c(as.matrix(glm.dt)), 0.25)  # TPM level
glm.dt <- glm.dt[apply(glm.dt, 1, function(x) max(x) > cutoff & sum(x > 0) > round(ncol(glm.dt) / 10)), ]
sample <- colnames(glm.dt)
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", sample), levels = c("2m", "4m", "5m", "6m"))
geno <- factor(gsub("^.*(WT|APP).*", "\\1", sample), levels = c("WT", "APP"))
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", sample), levels = c("2014", "mouse"))
uid <- paste(age, geno, sep = "_")
grp <- intersect(c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP"), uid)
nid <- factor(uid, levels = grp)
glm.fit <- apply(glm.dt, 1, function (x) summary(lm(x ~ age + geno + batch + age * geno)))
fit.batch <- sapply(glm.fit, function (x) x$coefficients["batchmouse", "Estimate"])
glm.dt_bc <- glm.dt - as.matrix(fit.batch) %*% (as.numeric(batch) - 1)
glm.fit <- apply(glm.dt_bc, 1, function (x) lm(x ~ age + geno + age * geno))
fit.r2 <- sapply(glm.fit, function (x) summary(x)$r.squared)
fit.fs <- sapply(glm.fit, function (x) summary(x)$fstatistic)
fit.pval <- apply(fit.fs, 2, function (x) pf(x[1], x[2], x[3], lower.tail = F))
glm.fit <- glm.fit[fit.pval < 0.05 & fit.r2 > 0.3]
fit.eff <- do.call(rbind, lapply(glm.fit, function (x) summary(x)$coefficients[, "Estimate"]))
fit.pval <- do.call(rbind, lapply(glm.fit, function (x) summary(x)$coefficients[, "Pr(>|t|)"]))
aov.fit <- lapply(glm.fit, anova)
aovGene <- lapply(c("age", "geno", "age:geno"), function(x1) {
y1 = sapply(aov.fit, function(x2) x2[x1, "Pr(>F)"]); y1[y1 < 0.05]
}); names(aovGene) <- c("age", "app", "age:app")
# Identify signal: GLM estiamtes
aovGene
length(aovGene)
aovGene[[1]]
binary <- apply(fit.pval, 2, function (x) x < 0.05) & apply(fit.eff, 2, function (x) abs(x) > 0.1)
head(binary)
binary <- binary[apply(binary[, -1], 1, any), -1]
head(binary)
signal <- apply(binary, 1, function (x) paste(x, collapse = "-"))
signalTable <- sort(table(signal), decreasing = T)
(signalTable <- signalTable[signalTable > 30])
signalGene <- sapply(names(signalTable), function(x) names(signal)[signal == x])
signalGene
length(signalGene)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.name = 0.5)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
binaryApp <- binary[, grep("APP", colnames(binary))]
binaryApp <- binaryApp[apply(binaryApp, 1, any), ]
signalApp <- apply(binaryApp, 1, function (x) paste(x, collapse = "-"))
signalTableApp <- sort(table(signalApp), decreasing = T)
(signalTableApp <- signalTableApp[signalTableApp > 30])
signalGeneApp <- sapply(names(signalTableApp), function(x) names(signalApp)[signalApp == x])
signalGeneApp
length(signalGeneApp)
keggFind("pathway", "Long-term potentiation")  # KEGG: LTR
mmu04720 <- keggGet("mmu04720")[[1]]$GENE
mmu04720 <- gsub(";.*", "", matrix(mmu04720, byrow = T, ncol = 2)[, 2])
xx = glm.fit[[mmu04720]]
mmu04720 %in% 'names(glm.fit)
''
`
)
ç
lapply(glm.fit[grep("Stat", names(glm.fit))], summary)
mmu04720 %in% names(glm.fit)
table(mmu04720 %in% names(glm.fit))
lapply(mmu04720, function(x) summary(glm.fit[[x]]))
ggvis1 <- function(x) # Visualize expression
data.frame(sample, uid, age, geno, batch, nid) %>% mutate(value = c(as.matrix(glm.dt[x, ]))) %>%
ggvis(~as.numeric(nid), ~value) %>% layer_boxplots(fill=~nid, width = 0.5)
ggvis("Stat3")
ggvis1("Stat3")
lapply(signalGeneApp, function(x) intersect(x, mmu04720))
bgMs <- gsub("[,|;].*", "", keggList("mmu"))
myhyper <- function(g1, g2) {  # Hypergeometric
if(length(intersect(g1, g2)) == 0) return(1)
1 - phyper(length(intersect(g1, g2)) - 1, length(g2), length(setdiff(bgMs, g2)), length(g1))
}  # Pr(count >= length(intersect(g1, g2)))
lapply(signalGeneApp, function(x) myhyper(x, mmu04720))
myhyper(rownames(binaryApp), mmu04720)
intersect(rownames(binaryApp), mmu04720)
Gnaq
Grin1
Grin2b
Ppp1r12a
Prkcb
Braf
Adcy1
lapply(signalGeneApp, function(x) intersect(x, mmu04720))
shiny::runApp('Shiny')
lapply(signalGene, length)
head(signalTable)
head(binary)
lapply(signalGene, function(x) intersect(x, mmu04720))
glm.fit[[Adcy1]]
glm.fit[["Adcy1"]]
glm.fit[["Adcy1"]] %>% summary
lapply(signalGene, function(x) intersect(x, mmu04720))
lapply(signalGene, function(x) myhyper(x, mmu04720))
xx <- glm.dt[signalGene[[3]], ]
head(xx)
glm.dt_mean <- sapply(grp, function(x) rowMeans(glm.dt[, uid == x]))
head(glm.dt_mean)
xx <- glm.dt_mean[signalGene[[3]], ]
head(xx)
xx <- log2(xx + 1) - log2(xx[, "2m_WT"] + 1)
head(xx)
names(xx)
plot(colMeans(xx[, grep("WT", colnames(xx))]))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b")
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))]), type = "b")
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b")
)
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.5, 0.1))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.5, 0.5))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.8, 0.8))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.2, 0.2))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.1))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
head(fit.eff)
up = rownames(xx)[fit.eff[rownames(xx), "age5m"] < 0]
up
intersect(mmu04720, up)
intersect(mmu04720, rownames(xx))
down = rownames(xx)[fit.eff[rownames(xx), "age5m"] < 0]
down = rownames(xx)[fit.eff[rownames(xx), "age5m"] < 0]
xx <- xx[down, ]
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.1))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.05))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "b"))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", color = "grey30"))
warnings()
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
plot(2:6, 0)
plot(2:6, rep(0, 5))
plot(2:6, rep(0, 5), type = "l")
line(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
plot(2:6, rep(0, 5), type = "l")
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
plot(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
plot(1:4, rep(0, 5), type = "l")
plot(1:4, rep(0, 4), type = "l")
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", ylim = c(-0.1, 0.02))
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", size = 2)
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", size = 2, lwd = 2)
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", size = 3, lwd = 3)
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", size = 3, lwd = 3, col = "red")
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02), col = "black")
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02), col = "blue")
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02), col = "blue", xlab = c(3:6))
?axis
axis(1, at=1:4, labels=c(3:6))
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02), col = "blue", xaxt = "n")
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels=c(3:6))
plot(1:4, rep(0, 4), type = "l", ylim = c(-0.1, 0.02), col = "blue", xlab = "", xaxt = "n")
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels=c(3:6))
axis(1, at=1:4, labels = paste0(c(2, 4, 5, 6), "m"))
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("WT", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels = paste0(c(2, 4, 5, 6), "m"))
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("APP", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("WT", colnames(xx))]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels = paste0(c(2, 4, 5, 6), "m"))
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, grep("APP", colnames(xx))], type = "l", col = "grey30"))
lines(colMeans(xx[, grep("APP", colnames(xx))]), type = "b", lwd = 3, col = "red")
xx <- glm.dt_mean[signalGene[[3]], ]
xx <- glm.dt_mean[signalGene[[3]], grep("WT", colnames(glm.dt_mean))]
head(xx)
xx <- glm.dt_mean[signalGene[[3]], grep("APP", colnames(glm.dt_mean))]
head(xx)
xx <- log2(xx + 1) - log2(xx[, 1] + 1)
down = rownames(xx)[fit.eff[rownames(xx), "age5m"] < 0]
xx <- xx[down, ]
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, ], type = "l", col = "grey30"))
lines(colMeans(xx[, ]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels = paste0(c(2, 4, 5, 6), "m"))
xx <- glm.dt_mean[signalGene[[3]], grep("WT", colnames(glm.dt_mean))]
xx <- log2(xx + 1) - log2(xx[, 1] + 1)
down = rownames(xx)[fit.eff[rownames(xx), "age5m"] < 0]
xx <- xx[down, ]
plot(1:4, rep(0, 4), type = "l", col = "blue", xlab = "", xaxt = "n", ylab = "", ylim = c(-0.1, 0.02))
lapply(1:nrow(xx), function(i) lines(xx[i, ], type = "l", col = "grey30"))
lines(colMeans(xx[, ]), type = "b", lwd = 3, col = "red")
axis(1, at=1:4, labels = paste0(c(2, 4, 5, 6), "m"))
nrow(xx)
source("../../X/kegg.R")
yy <- kegg(rownames(xx))
yy
glm.fit[["Gnaq"]]
summary(glm.fit[["Gnaq"]])
ggvis1("Gnaq")
colnames(glm.dt)
plot(glm.dt_mean["Gnaq", ])
plot(glm.dt_mean["Gnaq", grep("WT", colnames(glm.dt_mean))])
lines(glm.dt_mean["Gnaq", grep("APP", colnames(glm.dt_mean))], type = "b")
glm.fit[["Grin1"]]
summary(glm.fit[["Grin1"]])
summary(glm.fit[["Adcy1"]])
ggvis1("Adcy1")
getwd()
load("data/five.rdt")
names(five)
five$gk
