barplot(signalTable, horiz = T, las = 1)
bar <- barplot(signalTable, axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(0, 1, lwd = 1, col = "black")
text(y = bar, x = signalTable + 16, labels = cons_complete)
text(y = bar, x = signalTable + 16, labels = signalTable)
abline(0, 0, lwd = 1, col = "black")
?abline
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 20, labels = signalTable)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
op <- par(mar = c(5, 20, 4, 20))
bar <- barplot(signalTable, axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
bar <- barplot(signalTable, axes = F, border = NA, horiz = T, las = 1, space = 0.75)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
signalTable
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
text(y = bar, x = signalTable + 50, labels = signalTable)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 50, labels = signalTable)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex = 0.5)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, lab.cex = 0.5)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.lab = 0.5)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.lab = 0.5)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.axis = 0.5)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.axis = 0.1)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.axis = 0.1)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.name = 0.1)
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.name = 0.5)
op <- par(mar = c(5, 20, 4, 10))
bar <- barplot(signalTable, xlim = c(0, 750), axes = F, border = NA, horiz = T, las = 1, space = 0.75, cex.name = 0.5)
abline(v = 0, lwd = 1, col = "black")
text(y = bar, x = signalTable + 30, labels = signalTable)
binaryApp <- binary[, grep("APP", colnames(binary))]
binaryApp <- binaryApp[apply(binaryApp, 1, any), ]
signalApp <- apply(binaryApp, 1, function (x) paste(x, collapse = "-"))
(signalTableApp <- sort(table(signalApp), decreasing = T))
signalTableApp <- sort(table(signalApp), decreasing = T)
(signalTableApp <- signalTableApp[signalTableApp > 30])
signalGeneApp
signalGeneApp <- sapply(names(signalTableApp), function(x) names(signalApp)[signalApp == x])
signalGeneApp
length(signalGeneApp)
lapply(signalGeneApp, function(x) grep("Stat", x))
lapply(signalGene, function(x) grep("Stat", x))
interHg <- read.delim("R21/interaction.txt", stringsAsFactors = F, header = F)
interHg
human = useMart("ensembl", "hsapiens_gene_ensembl")
mouse = useMart("ensembl", "mmusculus_gene_ensembl")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
interHg <- read.delim("R21/interaction.txt", stringsAsFactors = F, header = F)
getLDS("hgnc_symbol", "hgnc_symbol", "TP53", human, attributesL = c("external_gene_name"), martL = mouse)
getLDS("hgnc_symbol", "hgnc_symbol", interHg$V1, human, attributesL = "external_gene_name", martL = mouse)
(interMs <- interMs[, 2])
interMs <- getLDS("hgnc_symbol", "hgnc_symbol", interHg$V1, human, attributesL = "external_gene_name", martL = mouse)
(interMs <- interMs[, 2])
intersect(interMs, rownames(binary))
intersect(interMs, rownames(binaryApp))
lapply(signalGeneApp, function(x) intersect(interMs, x))
STAT3_meta = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
STAT3_targetome = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
rm(STAT3_meta)
targets <- getLDS("hgnc_symbol", "hgnc_symbol", STAT3_targetome$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
targets
head(STAT3_targetome)
lapply(signalGeneApp, function(x) intersect(targets, x))
targets
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))
library(KEGGREST)
keggFind("pathway", "STAT")
keggFind("pathway", "Alzheimer")
keggFind("genes", "Alzheimer")
keggFind("pathway", "Alzheimer")
library(org.Hs.eg.db)
kegg <- org.Hs.egPATH2EG
str(kegg)
mapped <- mappedkeys(kegg)
kegg2 <- as.list(kegg[mapped])
kegg2
keggFind("pathway", "Alzheimer")
kegg2[["05010"]]
x = keggGet("hsa05010")[[1]]$GENE
head(x)
tail(x)
x
head(mapped)
keys(kegg)
str(kegg)
keytypes(kegg)
keytypes(kegg)
keys(kegg)
columns(x)
select(org.Hs.eg.db, keys = "1", columns = c("PATH", "SYMBOL"))
listDatabases()
keggList
keggList()
keggInfo("kegg")
keggList("pathway")
x = keggList("pathway")
str(x)
head(x)
x[1]
grep("STAT", x)
x[270]
keggGet("hsa05130", "kgml")
keggGet("hsa05130", "image")
keggList("organism")
x = keggGet("mmu05010")[[1]]$GENE
x
y = keggGet("hsa05010")
str(y)
names(y)
x = keggGet("hsa:05010")[[1]]$GENE
x = keggGet("hsa:05010")[[1]]$GENE
keggList("pathway")
x = keggGet("hsa05010", "pathway")[[1]]$GENE
write(keggGet("hsa05130", "kgml"), file = "test.xml")
keggFind("pathway", "STAT")
save(keggGet("hsa05130", "image"), file = "test.png"
)
write(keggGet("hsa05130", "image"), file = "test.png")
library(png)
writePNG(keggGet("hsa05130", "image"), file = "test.png")
?writePNG
writePNG(keggGet("hsa05130", "image"))
writePNG(keggGet("hsa05130", "image"), "x")
keggList("hsa")
library(KEGGREST)
keggList("pathway")
keggFind("pathway", "STAT")
x = keggGet("mmu04630")[[1]]$GENE
head(x)
x = as.matrix(keggGet("mmu04630")[[1]]$GENE, ncol = 2)
head(x)
x = matrix(keggGet("mmu04630")[[1]]$GENE, ncol = 2)
head(x)
?matrix
x = matrix(keggGet("mmu04630")[[1]]$GENE, byrow = T, ncol = 2)
head(x)
gsub(";.*", "", x[, 2])
mmu04630 <- keggGet("mmu04630")[[1]]$GENE
head(mmu04630)
mmu04630 <- keggGet("mmu04630")[[1]]$GENE %>% gsub(";.*", "", matrix(byrow = T, ncol = 2)[, 2])
mmu04630 <- keggGet("mmu04630")[[1]]$GENE %>% matrix(byrow = T, ncol = 2)[, 2])
mmu04630 <- keggGet("mmu04630")[[1]]$GENE %>% matrix(byrow = T, ncol = 2)[, 2]
mmu04630 <- keggGet("mmu04630")[[1]]$GENE %>% function(x) matrix(x, byrow = T, ncol = 2)[, 2]
mmu04630 <- gsub(";.*", "", matrix(mmu04630, byrow = T, ncol = 2)[, 2])
mmu04630
mmu04630 <- keggGet("mmu04630")[[1]]$GENE
mmu04630
mmu04630 <- gsub(";.*", "", matrix(mmu04630, byrow = T, ncol = 2)[, 2])
mmu04630
keggFind("pathway", "Alzheimer")
mmu05010 <- keggGet("mmu05010")[[1]]$GENE
mmu05010 <- gsub(";.*", "", matrix(mmu05010, byrow = T, ncol = 2)[, 2])
mmu05010
mmu04630
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")
TeaTasting <- matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")
TeaTasting <- matrix(c(6, 2, 2, 6),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")
TeaTasting <- matrix(c(7, 2, 2, 7),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")
x = matrix(c(3, 297, 40, 19960), nrow = 2)
x
fisher.test(x)
?dhyper
dim(glm.dt)
head(glm.dt)
background <- rownames(glm.dt)
mmu05010
a = 1:10
b = 7:13
setdiff(a, b)
background <- rownames(glm.dt)
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
rownames(binaryApp)
myhyper(rownames(binaryApp), mmu05010)
myhyper(rownames(binary), mmu05010)
lapply(signalGeneApp, function(x) myhyper(x, mmu05010))
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
length(setdiff(background, mmu04630))
length(mmu04630)
myhyper(rownames(binaryApp, mmu05010))
myhyper(rownames(binaryApp), mmu05010)
myhyper(mmu05010, rownames(binaryApp))
nrow(binaryApp)
length(mmu05010)
mmu04630
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
background <- unique(c(mmu05010, mmu04630))
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
myhyper(rownames(binaryApp), mmu05010)
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
background <- unique(c(mmu05010, mmu04630, rownames(binaryApp)))
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
myhyper(rownames(binaryApp), mmu05010)
length(background)
listB = mmu04630
listA = signalGeneApp[[1]]
x = length(intersect(listA, listB))
x
x = ifelse(x > 0, x - 1, x)
x
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
length(listB)
length(setdiff(background, listB))
length(listA)
phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
background <- rownames(glm.dt)
length(background)
setdiff(mmu04630, background)
1 - phyper(100, 1000, 10000, 400)
1 - phyper(100, 1000, 10000, 2000)
1 - phyper(100, 1000, 10000, 300)
1 - phyper(100, 1000, 10000, 1000)
1 - phyper(100, 1000, 20000, 1000)
1 - phyper(100, 1000, 30000, 1000)
1 - phyper(100, 1000, 1000, 1000)
1 - phyper(100, 1000, 10000, 1000)
nrow(brain.tpm)
nrow(glm.dt)
background <- rownames(brain.tpm)
head(background)
setdiff(listB, background)
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
lapply(signalGeneApp, function(x) myhyper(x, mmu05010))
library(KEGG.db)
uni_kg <- get("org.Mm.egPATH") %>% Lkeys
library(org.Mm.eg.db)
uni_kg <- get("org.Mm.egPATH") %>% Lkeys
length(uni_kg)
background <- rep(rownames(brain.tpm), 2)
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
listA = signalGeneApp[[1]]
listB
x = length(intersect(listA, listB))
x
x = ifelse(x > 0, x - 1, x)
1 - phyper(6, length(listB), 10000, length(listA))
1 - phyper(6, length(listB), 30000, length(listA))
1 - phyper(6, length(listB), 20000, length(listA))
length(listA)
listB
keggInfo("kegg")
keggInfo("hsa")
keggLink("pathway", "hsa")
keggList("pathway")
keggList("mmu")
x = keggList("mmu")
head(x)
x[1:2]
x[1:4]
background <- gsub(";.*", "", matrix(x, byrow = T, ncol = 2)[, 1])
head(background)
background <- gsub(";.*", "", x)
head(background)
head(x)
length(background)
background[1:100]
names(background) = NULL
background[1:100]
background <- background[! grepl(" ", background)]
length(background)
background[1:100]
tail(background)
setdiff(background, mmu04630)
setdiff(mmu04630, background)
"Atk2" %in% background
head(x)
length(x)
grep("Atk2", x)
grep("Gm16041", x)
grep("Grb2", x)
x[grep("Grb2", x)]
x[1:20]
background <- gsub("[,|;].*", "", x)
length(background)
head(background)
grep("Gm16041", background)
setdiff(mmu04630, background)
mmu04630
background <- background[! grepl(" ", background)]
length(background)
setdiff(mmu04630, background)
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
lapply(signalGeneApp, function(x) myhyper(x, mmu04630))
background <- gsub("[,|;].*", "", keggList("mmu"))
myhyper <- function(listA, listB) {
x = length(intersect(listA, listB))
x = ifelse(x > 0, x - 1, x)
1 - phyper(x, length(listB), length(setdiff(background, listB)), length(listA))
}
myhyper(rownames(binaryApp), mmu05010)
myhyper(mmu05010, rownames(binaryApp))
lapply(signalGeneApp, function(x) myhyper(x, mmu05010))
lapply(signalGeneApp, length)
lapply(signalGeneApp, function(x) myhyper(mmu05010, x))
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
head(STAT3_targetome)
edges = STAT3_targetome
igraph.dt <- graph.data.frame(edges)  # VISUALIZATION: IGRAPH
library(igraph)
igraph.dt <- graph.data.frame(edges)  # VISUALIZATION: IGRAPH
igraph.dt$layout <- layout.sphere
str(igraph.dt)
head(STAT3_targetome)
edges <- STAT3_targetome[, c("Regulator.Gene", "Target.Gene")]
igraph.dt <- graph.data.frame(edges)  # VISUALIZATION: IGRAPH
igraph.dt$layout <- layout.sphere
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3)
dim(edges)
head(edges)
edges = edges[1:100, ]
igraph.dt <- graph.data.frame(edges)  # VISUALIZATION: IGRAPH
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3)
head(targets)
igraph.dt <- graph.data.frame(cbind("Stat3", targets))  # VISUALIZATION: IGRAPH
cbind("Stat3", targets)
igraph.dt <- graph.data.frame(cbind("Stat3", targets[, 2]))  # VISUALIZATION: IGRAPH
cbind("Stat3", targets[, 2])
cbind("Stat3", targets)
head(targets)
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # VISUALIZATION: IGRAPH
cbind("Stat3", targets$Associated.Gene.Name)
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # VISUALIZATION: IGRAPH
attributes(igraph.dt)
str(igraph.dt)
head(targets)
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
head(targets)
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # IGRAPH
igraph.dt$layout <- layout.sphere
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
V(igraph.dt)$label.cex = 0.7
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, label.cex = 0.7)
?plot.igraph
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, label.size = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.4)
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # IGRAPH
igraph.dt$layout <- layout.sphere
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.7)
igraph.dt$layout <- layout.circle
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.7)
targets[targets %in% mmu04630]
targets[targets[, 2] %in% mmu04630, ]
targets[targets[, 2] %in% mmu05010, ]
STAT3_targetome = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
targets <- getLDS("hgnc_symbol", "hgnc_symbol", STAT3_targetome$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
igraph.dt$layout <- layout.auto
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.7)
igraph.dt$layout <- layout.fruchterman.reingold
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, size = 0.5, vertex.label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3, vertex.size = 0.5, vertex.label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 0.5, vertex.label.cex = 0.7)
head(STAT3_targetome)
targets = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
targets = targets %>% filter(Strength > 10)
targets <- getLDS("hgnc_symbol", "hgnc_symbol", STAT3_targetome$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # IGRAPH
igraph.dt$layout <- layout.sphere
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 1, vertex.label.cex = 0.7)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
igraph.dt$layout <- layout.fruchterman.reingold
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
targets[targets[, 2] %in% mmu05010, ]
targets[targets[, 2] %in% mmu04630, ]
targets = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
targets = targets %>% filter(Strength > 20)
targets <- getLDS("hgnc_symbol", "hgnc_symbol", STAT3_targetome$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
targets[targets[, 2] %in% mmu04630, ]
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
targets[targets[, 2] %in% mmu04630, ]
targets = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
targets = targets %>% filter(Strength > 30)
targets <- getLDS("hgnc_symbol", "hgnc_symbol", STAT3_targetome$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
targets = read.delim("R21/STAT3_meta.csv", stringsAsFactors = F, sep = ",")
targets = targets %>% filter(Strength > 10)
targets <- getLDS("hgnc_symbol", "hgnc_symbol", targets$Target.Gene, human, attributesL = "external_gene_name", martL = mouse)
lapply(signalGeneApp, function(x) intersect(targets[, 2], x))  # Where overlaps distribute?
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
targets[targets[, 2] %in% mmu04630, ]
targets[targets[, 2] %in% mmu05010, ]
targets <- targets %>% filter(Associated.Gene.Name %in% rownames(binaryApp))
igraph.dt <- graph.data.frame(cbind("Stat3", targets$Associated.Gene.Name))  # IGRAPH
igraph.dt$layout <- layout.fruchterman.reingold
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$label.color = rep("grey30", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$label.color = rep("grey90", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$label.color = rep("grey10", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$color[V(igraph.dt)$name %in% mmu05010] <- "green"
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% mmu05010] <- "green"
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
V(igraph.dt)$name
V(igraph.dt)$name %in% mmu05010
V(igraph.dt)$color[V(igraph.dt)$name %in% mmu04630] <- "green"
V(igraph.dt)$color[V(igraph.dt)$name %in% mmu04630] <- "black"
V(igraph.dt)$color[V(igraph.dt)$name %in% "Stat3"] <- "gold"
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.1, vertex.size = 5, vertex.label.cex = 0.7)
positive
?phyper
A = c("a", "b")
B = c("c")
intersect(A, B)
is.na(intersect(A, B))
is.null(intersect(A, B))
length(intersect(A, B))
