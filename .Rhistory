fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"),
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 1, cat.pos = 0,
col = "transparent", alpha = .5, cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold", cat.pos = 0,
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
venn.diagram(list(DE4m = rownames(DE.month$DE4m), DE5m = rownames(DE.month$DE5m), DE6m = rownames(DE.month$DE6m)),
fill = c("dodgerblue3", "firebrick1", "chartreuse3"), col = "transparent", alpha = .5,
cat.col = c("dodgerblue3", "firebrick1", "chartreuse3"), cat.cex = 2, cat.fontface = "bold",
cex = 2, fontface = "bold", lwd = 0, file = "~/Dropbox/AD/Graphs/venn1.tiff")
x = "DE4m"
DE.month$x
DE.month$"x"
DE.month$DE4m
DE.month[[x]]
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "."), "txt", sep = "."))
for (month in c("DE4m", "DE5m", "DE6m"))
write.table(rownames(DE.month[[month]]), row.names = FALSE, col.names = FALSE, quote = FALSE,
file = paste(paste("~/Dropbox/AD/DAVID", month, sep = "/"), "txt", sep = "."))
rm(list = ls())
library(maSigPro)
load("~/Dropbox/AD/R/batch2014.rdt")
str(dt)
colnames(dt)
data(edesign.abiotic)
edesign.abiotic
treat <- rep("WT", ncol(dt))
treat[grep("APP", colnames(dt))] <- "APP"
month <- rep("4m", ncol(dt))
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
treat
month
colnames(dt)
paste(treat, month, sep = "")
uid <- paste(treat, month, sep = "")
uid
as.numeric(uid)
as.integer(uid)
as.factor(uid)
nlevels(as.factor(uid))
month <- rep("2m", ncol(dt))
month[grep("4m", colnames(dt))] <- "5m"
month[grep("5m", colnames(dt))] <- "5m"
month[grep("6m", colnames(dt))] <- "6m"
uid <- paste(treat, month, sep = "")
nlevels(as.factor(uid))
levels(as.factor(uid))
as.numeric(as.factor(uid))
edesign.abiotic
design <- cbind(Time = gsub("m", ",", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = gsub("m", "", month),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
design <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
design
rownames(design) <- colnames(dt)
design
data(data.abiotic)
edesign <- cbind(Time = as.numeric(gsub("m", "", month)),
Replicate = as.numeric(as.factor(uid)),
Control = as.numeric(treat == "WT"),
MT = as.numeric(treat == "APP"))
rownames(edesign) <- colnames(dt)
design <- make.design.matrix(edesign, degree = 3)
design
?p.vector
fit <- p.vector(dt, design, Q = 0.05, MT.adjust = "BH")
fit$I
fit$i
fit$alfa
fit$alfa
fit$SELEC
str(fit)
?T.step
?T.fit
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
str(tstep)
tstep$coefficients
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
str(sigs)
suma2Venn(sigs$summary[, 2:4])
sigs$summary
suma2Venn(sigs$summary[, 1:2])
str(sigs)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "each")
sigs$summary
stop("x")
setwd()
0.01 * 584
n <- 100
object.size(n)
object.size(n, units = "auto")
?object.size
format(object.size(n), units = "auto")
format(object.size(n), units = "Gb")
?grep
?read.delim
load("~/Dropbox/ADSP/R/hg19Gene.rdt")
head(hg19Gene)
library(pheatmap)
library(ggplot2)
library(matrixcalc)
rm(list = ls())
load("~/Dropbox/ADSP/R/kinship.rdt")
KS <- kinship$autosome
is.positive.definite(KS)
KS[KS < 0] <- 0
is.positive.definite(KS)
KS <- kinship$autosome
KS[KS < 0] <- 0
is.positive.definite(KS)
KS[1:10, 1:10]
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
kin23 <- kinship$kin23
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-heatmap.pdf")
pheatmap(cor(kin23), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
for (i in 1:22) {
KS <- kinship$chr[[i]]
KS[KS < 0] <- 0
judge <- is.positive.definite(KS)
cat(judge, "\n")
}
load("~/Dropbox/ADSP/R/KS_doqtl.rdt")
load("~/Dropbox/ADSP/R/KS_emma.rdt")
compare <- cbind(EMMA = c(kin1), DOQTL = c(kin2), KING = c(kinship$autosome))
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 4, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf", height = 3, width = 3)
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 10)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 20)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
?pheatmap
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 2, cellheight = 2, fontsize_number = 6)
# heatmap(cor(kinship23))
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 10, cellheight = 10, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 20, cellheight = 20, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
packages <- c("tidyr","dplyr", "ggvis")
sapply(packages, require, character.only = T)
trim <- read.delim("data/trim.txt", header = F, stringsAsFactors = F)
rsem <- read.delim("data/rsem_c3h.txt", header = F, stringsAsFactors = F)
qc <- full_join(trim, rsem, by = "V1")[, -3]
colnames(qc) <- c("sample", "trim", "count", "bowtie")
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc$sample <- gsub("_.*", "", qc$sample)
qc$group <- gsub("[123]", "", qc$sample) %>% factor(levels = group)
qc$genotype <- gsub("^(M|W).*", "\\1", qc$sample) %>% factor(levels = c("W", "M"))
qc$count <- qc$count * 1e-6
qc$trim <- as.numeric(gsub("%", "", qc$trim)) * 1e-2
qc$bowtie<- as.numeric(gsub("%", "", qc$bowtie)) * 1e-2
qc$aligned <- qc$count * qc$bowtie
qc$group1 <- as.numeric(qc$group)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
txInf <- ge[[1]] %>% select(gene_id, length) %>% mutate(symbol = ens.map[gene_id, 2])
ge_TPM <- sapply(ge, function(x) x$TPM) %>% as.data.frame
ge_count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
data <- ge_count; data <- data[, qc$sample]
genes <- data[! grepl("ERCC", rownames(data)), ]
spike <- data[grep("ERCC", rownames(data)), ]
qc$f_count <- qc$count / qc$count[1]
qc$f_aligned <- qc$aligned / qc$aligned[1]
qc$f_spike1 <- colSums(spike) / colSums(spike)[1]
qc$f_spike2 <- c(W1NONP = 1, apply(spike[, -1], 2, function(x) summary(lm(x ~ -1 + spike[, 1]))$coefficients[1, 1]))
txInf1 <- txInf %>% filter(! grepl("ERCC", gene_id))
raw <- apply(genes, 2, function(x) tapply(x, txInf1$symbol, sum))
raw <- raw[apply(raw, 1, function (x) length(x[x > 20]) > 2), ]
total <- t(apply(raw, 1, "/", qc$f_count))
aligned <- t(apply(raw, 1, "/", qc$f_aligned))
spike2 <- t(apply(raw, 1, "/", qc$f_spike2))
qc %>% ggvis(~group1, ~f_spike1) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~f_spike2) %>% scale_numeric("y", domain=c(.5, 2.0)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~trim) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~bowtie) %>% scale_numeric("y", domain=c(0.5, 1)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~count) %>% scale_numeric("y", domain=c(25, 45)) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~aligned) %>% scale_numeric("y", domain=c(15, 35)) %>% ggvis_boxplots()
ensId <- txInf %>% filter(symbol == "Actb") %>% select(gene_id)
qc$actb <- colSums(genes[ensId$gene_id, ])
qc <- mutate(qc, actb_f_count = actb / f_count, actb_f_aligned = actb / f_aligned,
actb_f_spike1 = actb / f_spike1, actb_f_spike2 = actb / f_spike2)
qc %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_count) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_aligned) %>% ggvis_boxplots()
qc %>% ggvis(~group1, ~actb_f_spike1) %>% ggvis_boxplots()
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
packages <- c("tidyr","dplyr", "biomaRt", "ggvis")
sapply(packages, require, character.only = T)
load("data/ge.rdt")
ge_tpm <- sapply(ge, function(x) x$TPM) %>% as.data.frame
head(ge_tpm)
head(ge[[1]])
ensId <- ge[[1]]$gene_id
head(ensId)
mart = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
myX <- getBM(c("ensembl_gene_id", "external_gene_name"), "ensembl_transcript_id", ensId, mart)
head(myX)
tail(myX)
?getBM
biomart <- getBM(c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name"),
filters = "ensembl_transcript_id", values = ensId, mart)
listAtributes(mart)
listAttributes(mart)
head(biomart)
biomart %>% filter(external_gene_name = "Actb")
biomart %>% filter(external_gene_name == "Actb")
x = biomart[match(ge[[1]]$gene_id, biomart$ensembl_transcript_id), ]
head(x)
tx_inf <- biomart[match(ge[[1]]$gene_id, biomart$ensembl_transcript_id), ]
biomart <- biomart[match(ge[[1]]$gene_id, biomart$ensembl_transcript_id), ]
head(biomart)
?tapply
tapply(ge_tpm[, 1], biomart$external_gene_name, sum)
x = tapply(ge_tpm[, 1], biomart$external_gene_name, sum)
head(x)
x = apply(ge_tpm, 2, function(x) tapply(x, biomart$external_gene_name, sum))
dim(x)
head(x)
biomart$external_gene_name
head(biomart$external_gene_name)
y = ge_tpm[is.na(biomart$external_gene_name)]
y = ge_tpm[is.na(biomart$external_gene_name), ]
y
head(x)
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
qc <- data.frame %>% mutate(sample = colnames(x))
qc <- as.data.frame %>% mutate(sample = colnames(x))
mutate(qc, sample = colnames(x))
actb <- data.frame()
actb <- mutate(actb, sample = colnames(x))
actb
actb <- data.frame(sample = colnames(x))
actb
actb <- mutate(actb, group = gsub("[123]", "", sample) %>% factor(levels = group))
actb
str(actb)
actb <- mutate(actb, genotype = gsub("^(M|W).*", "\\1", sample) %>% factor(levels = c("W", "M"))
)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
actb$group <- as.numeric(actb$group)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
actb <- data.frame(sample = colnames(x), value = x["Actb",])
actb <- mutate(actb, group = gsub("[123]", "", sample) %>% factor(levels = group))
actb <- mutate(actb, genotype = gsub("^(M|W).*", "\\1", sample) %>% factor(levels = c("W", "M")))
actb$group <- as.numeric(actb$group)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
qc %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
actb %>% ggvis(~group1, ~actb) %>% ggvis_boxplots()
actb %>% ggvis(~group, ~actb) %>% ggvis_boxplots()
actb %>% ggvis(~group, ~value) %>% ggvis_boxplots()
group <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
actb <- data.frame(sample = colnames(x), value = x["Actb",])
actb <- mutate(actb, group = gsub("[123]", "", sample) %>% factor(levels = group))
actb <- mutate(actb, genotype = gsub("^(M|W).*", "\\1", sample) %>% factor(levels = c("W", "M")))
actb$group1 <- as.numeric(actb$group)
ggvis_boxplots <- function(x) {x %>% add_axis("x", values = NULL, title = "Group") %>%
layer_boxplots(fill=~group, width = 0.3) %>% layer_text(text:=~sample)}
actb %>% ggvis(~group1, ~value) %>% ggvis_boxplots()
rownames(x)
rownames(x)[1:1000]
rownames(x)[1001:2000]
rownames(x)[2001:3000]
table(biomart$external_gene_name == "")
ge_tpm[biomart$external_gene_name == "", ]
y = ge_tpm[biomart$external_gene_name == "", ]
dim(y)
head(ge_tpm)
which(biomart$external_gene_name == "")
y = ge_tpm[which(biomart$external_gene_name == ""), ]
y
colSums(y)
ge_tpm <- apply(ge_tpm, 2, function(x) tapply(x, biomart$external_gene_name, sum))
head(ge_tpm)
ge_tpm <- ge_tpm[-1, ]
head(ge_tpm)
hspa2 <- data.frame(sample = colnames(x), value = x["Hspa2",])
actb <- mutate(actb, group = gsub("[123]", "", sample) %>% factor(levels = group))
actb <- data.frame(sample = colnames(x), value = x["Hspa2",])
actb <- mutate(actb, group = gsub("[123]", "", sample) %>% factor(levels = group))
actb <- mutate(actb, genotype = gsub("^(M|W).*", "\\1", sample) %>% factor(levels = c("W", "M")))
actb$group1 <- as.numeric(actb$group)
actb %>% ggvis(~group1, ~value) %>% ggvis_boxplots()
build_ratio <- ge_tpm %>% mutate(RM1 <- M1PLM / M1NONP,
RW1 <- W1PLM / W1NONP)
ge_tpm <- ge_tpm[-1, ] %>% as.data.frame
build_ratio <- ge_tpm %>% mutate(RM1 <- M1PLM / M1NONP,
RW1 <- W1PLM / W1NONP)
head(build_ratio)
build <-(ge_tpm, R_W1 = W1PLM / W1NONP, R_W2 = W2PLM / W2NONP, R_W3 = W3PLM / W3NONP,
R_M1 = M1PLM / M1NONP, R_M2 = M2PLM / M2NONP, R_M3 = M3PLM / M3NONP)
build <- mutate(ge_tpm, R_W1 = W1PLM / W1NONP, R_W2 = W2PLM / W2NONP, R_W3 = W3PLM / W3NONP,
R_M1 = M1PLM / M1NONP, R_M2 = M2PLM / M2NONP, R_M3 = M3PLM / M3NONP)
head(build)
head(ge_tpm)
build <- mutate(ge_tpm, R_W1 = W1PLM / W1NONP, R_W2 = W2PLM / W2NONP, R_W3 = W3PLM / W3NONP,
R_M1 = M1PLM / M1NONP, R_M2 = M2PLM / M2NONP, R_M3 = M3PLM / M3NONP)
head(ge_tpm)
head(build)
51.27 / 31.73
library(Gviz)
library(Rsamtools)
library(dplyr)
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis/")
library(seqinr)
library(Pviz)
rna <- read.fasta(file = "gviz/seqs.fa")
setwd("shiny")
rna <- read.fasta(file = "gviz/seqs.fa")
amac <- getTrans(rna)
amac[[1]]
head(amac[[1]])
library(DESeq2)
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
rm(list = ls())
setwd("~/Dropbox/GitHub/Load/")
packages <- c("tidyr","dplyr", "ggvis", "biomaRt", "xlsx")
library(biomaRt)
