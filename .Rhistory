table(test$QL)
cor(test$QL, test$ZW)
cor(test$QL, test$ZW, method = "spearman")
head(test)
test1 = test %>% filter(V3 == "ENSMUST00000058133")
head(test1)
sum(test1$ZW)
x = test1$ZW
sum(x[x > 0.1])
x[x > 0.1]
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
names(ge)
y = ge[[1]]
head(y)
y %>% filter(gene_id == "ENSMUST00000058133")
head(ge_count)
load("data/ge.rdt"); load("../X/ensembl_mus.rdt")
txInf <- ge[[1]] %>% select(gene_id, length) %>% mutate(symbol = ens.map[gene_id, 2])
ge_TPM <- sapply(ge, function(x) x$TPM) %>% as.data.frame
ge_count <- sapply(ge, function(x) x$expected_count) %>% as.data.frame
rownames(ge_count) <- rownames(ge_TPM) <- txInf$gene_id
ge_count["ENSMUST00000058133", ]
head(test1)
name <- list.files(path = "bam/", pattern = "*ALL.bam$")
setwd("~/Dropbox/GitHub/Testis/")
setwd("shiny")
name <- list.files(path = "bam/", pattern = "*ALL.bam$")
lapply(name, function(x) indexBam(paste("bam", x, sep = "/")))
library(Rsamtools)
library(Gviz)
lapply(name, function(x) indexBam(paste("bam", x, sep = "/")))
sample <- lapply(name, function(x) AlignmentsTrack(paste("bam", x, sep = "/")))
names(sample) <- gsub("_.*", "", name)
seqs <- SequenceTrack("../gviz/seqs.fa", name = "C3H")
seqnames(seqs)
names(sample)
alignList <- list()
alignList$seqs <- seqs
alignList$sample <- sample
load("shinyList.rdt")
tx_map = shinyList$tx_map
tx_map
alignList$tx_map <- tx_map
save(alignList, file = "alignList.rdt")
names(alignList)
shiny::runApp()
head(test1)
sum(test1$ZW)
read1 <- samples[[1]]
read1 <- sample[[1]]
plotTracks(list(seqs, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 0.7, add53 = T)
gtrack <- GenomeAxisTrack()
plotTracks(list(seqs, gtrack, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 0.7, add53 = T)
axis <- GenomeAxisTrack()
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 0.7, add53 = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
transcript <- alignList$tx_map$ID
transcript
shiny::runApp()
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 1, add53 = T)
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 1, col = "red", add53 = T)
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 1, col.id = "red", add53 = T)
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 1, fontcolor = "red", add53 = T)
shiny::runApp()
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 0.7, fontcolor = "red", add53 = T)
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, cex = 0.7, add53 = T)
plotTracks(list(seqs, axis, read1), chromosome = "ENSMUST00000080449", from = 1, to = 2670, add53 = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
setwd("~/Dropbox/edX")
y = tapply(tab$sleep_total, tab$genus, mean)
tab <- read.csv("msleep_ggplot2.csv"); class(tab)
y = tapply(tab$sleep_total, tab$genus, mean)
y = tapply(tab$sleep_total, list(tab$genus, tab$order), mean)
with(tab, tapply(sleep_total, list(genus, order), mean))
x <- within(tab, rm(vore))
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
rm(list = ls())
data(GSE5859Subset) ##this loads the three tables
head(sampleInfo)
sum(sampleInfo$date = "2005-06-27")
sum(sampleInfo$date == "2005-06-27")
head(geneAnnotation)
sum(geneAnnotation$CHR == "chrY")
sum(as.character(geneAnnotation$CHR) == "chrY")
table(geneAnnotation$CHR)
sampleInfo %>% filter(date == "2005-06-10")
head(geneExpression)
head(geneAnnotation)
geneAnnotation %>% filter(SYMBOL == "ARPC1A")
geneExpression["200950_at", "GSM136727.CEL.gz"]
library(genefilter)
library(genefilter)
set.seed(1)
library(downloader)
url = "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename = "femaleControlsPopulation.csv"
if (!file.exists(filename)) download(url,destfile=filename)
population = read.csv(filename)
pvals <- replicate(1000,{
control = sample(population[,1],12)
treatment = sample(population[,1],12)
t.test(treatment,control)$p.val
})
head(pvals)
hist(pvals)
mean(pvals < 0.05)
mean(pvals < 0.01)
set.seed(100)
pvals <- replicate(20,{
cases = rnorm(10,30,2)
controls = rnorm(10,30,2)
t.test(cases,controls)$p.val
})
pval
pvals
sum(pvals < 0.05)
set.seed(100)
pvals <- replicate(1e3, {
x = replicate(20,{
cases = rnorm(10,30,2)
controls = rnorm(10,30,2)
t.test(cases,controls)$p.val
})
sum(x < 0.05)
})
pvals
mean(pvals)
mean(pvals > 0)
library(ape)
library(amap)
library(ggdendro)
library(MASS)
library(gplots)
library(ggplot2)
library(ggvis)
library(pheatmap)
library(grid)
library(dplyr)
library(contrast)
library(multcomp)
library(png)
rm(list = ls())
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain2014.rdt"); glm.dt <- brain.tpm
source("function.R")
cutoff <- quantile(c(as.matrix(glm.dt)), 0.25)  # TPM level
glm.dt <- glm.dt[apply(glm.dt, 1, function(x) max(x) > cutoff & sum(x > 0) > round(ncol(glm.dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(glm.dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(glm.dt)), levels = c("WT", "APP"))
uid <- paste(age, group, sep = "_"); table(uid)
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(glm.dt)), levels = c("2014", "mouse"))
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
conditions <- conditions[conditions %in% uid]
fit0 <- apply(glm.dt, 1, function (x) summary(lm(x ~ age + group + batch + age*group)))
fit0.batch <- sapply(fit0, function (x) x$coefficients["batchmouse", "Estimate"])
glm.dt_bc <- glm.dt - as.matrix(fit0.batch) %*% (as.numeric(batch) - 1)
glm.fit <- apply(glm.dt_bc, 1, function (x) lm(x ~ age + group + age*group))
summary(glm.fit[["App"]])$coefficient
fit.r2 <- sapply(glm.fit, function (x) summary(x)$r.squared)
fit.qval <- sapply(glm.fit, function (x) summary(x)$fstatistic) %>%
apply(2, function (x) pf(x[1], x[2], x[3], lower.tail = F)) %>% p.adjust(method = "fdr")
glm.fit <- glm.fit[fit.qval < 0.05 & fit.r2 > 0.3]
length(glm.fit)
fit.anova <- lapply(glm.fit, anova)
fit.anova[["App"]]
genes.aov <- lapply(c("age", "group", "age:group"), function(x1) {
y1 = sapply(fit.anova, function(x2) x2[x1, "Pr(>F)"]); y1[y1 < 0.05]
}); names(genes.aov) <- c("age", "app", "age:app")
sapply(genes.aov, function(x) length(x))
par(mar = c(0, 5, 0, 2))
venn(list(age = names(genes.aov[[1]]), APP = names(genes.aov[[2]]), age_int_app = names(genes.aov[[3]])))
age_spe <- lapply(c("2m", "4m", "5m", "6m"), function(x1) {
y1 = sapply(glm.fit, function(x2) {
y2 = contrast(x2, list(age = x1, group = "APP"), list(age = x1, group = "WT"))
c(y2$Contrast, y2$Pvalue)
}); rownames(y1) = c("contrast", "pval"); t(y1)
}); names(age_spe) <- c("2m", "4m", "5m", "6m")
x1 = "2m"
y1 = sapply(glm.fit, function(x2) contrast(x2, list(age = x1, group = "APP"), list(age = x1, group = "WT"))[c("Contrast", "Pvalue"), ])
x1
sapply(c("2m", "4m", "5m", "6m"), function(x1) {
contrast(glm.fit[["Stat3"]], list(age = x1, group = "APP"), list (age = x1, group = "WT"))
})[c("Contrast", "Pvalue"), ]
y1 = sapply(glm.fit, function(x2) contrast(x2, list(age = x1, group = "APP"), list(age = x1, group = "WT")))[c("Contrast", "Pvalue"), ]
dim(y1)
y1[, 1:10]
sapply(c("2m", "4m", "5m", "6m"), function(x1) {
contrast(glm.fit[["Stat3"]], list(age = x1, group = "APP"), list (age = x1, group = "WT"))
})[c("Contrast", "Pvalue"), ]
sapply(c("2m", "4m", "5m", "6m"), function(x1) {
contrast(glm.fit[["Stat3"]], list(age = x1, group = "APP"), list (age = x1, group = "WT"))
})[c("Contrast", "Pvalue")]
age_spe <- lapply(c("2m", "4m", "5m", "6m"), function(x1) {
sapply(glm.fit, function(x2)
contrast(x2, list(age = x1, group = "APP"), list(age = x1, group = "WT")))[c("Contrast", "Pvalue"), ]
});
names(age_spe)
names(age_spe) <- c("2m", "4m", "5m", "6m")
age_spe[[1]][, 1:10]
age_spe_up <- sapply(age_spe, function(x) x[x[, 1] > 0.1 & x[, 2] < 0.05, ])
age_spe_dn <- sapply(age_spe, function(x) x[x[, 1] < -0.1 & x[, 2] < 0.05, ])
age_spe_up[[1]][, 1:10]
age_spe_up[[1]]
age_spe_up <- sapply(age_spe, function(x) x[, x[1, ] > 0.1 & x[2, ] < 0.05])
age_spe_dn <- sapply(age_spe, function(x) x[, x[1, ] < -0.1 & x[2, ] < 0.05])
age_spe_up[[1]][, 1:10]
cat("Age-specific APP genes: up (contrast > 0.1, pvalue < 0.05) \n")
sapply(age_spe_up, function(x) ncol(x))
cat("Age-specific APP genes: down (contrast < -0.1, pvalue < 0.05) \n")
sapply(age_spe_dn, function(x) ncol(x))
combn <- combn(c("2m", "4m", "5m", "6m"), 2)
geno_spec_wt <- lapply(1:ncol(combn), function(x1) {
sapply(glm.fit, function(x2)
contrast(x2, list(age = combn[2, x1], group = "WT"), list(age = combn[1, x1], group = "WT")))[c("Contrast", "Pvalue"), ]
}); names(geno_spec_wt) <- apply(combn, 2, function(x) paste0(x[2], "_vs_", x[1]))
geno_spe_wt = geno_spec_wt
sapply(1:ncol(combn), function(x1) {
contrast(glm.fit[["Stat3"]], list(age = combn[2, x1], group = "WT"), list(age = combn[1, x1], group = "WT"))
})[c("Contrast", "Pvalue"), ]
geno_spe_wt[[1]]
dim(geno_spe_wt[[1]])
geno_spe_wt_up <- sapply(geno_spe_wt, function(x) x[, x[1, ] > 0.1 & x[2, ] < 0.05])
geno_spe_wt_dn <- sapply(geno_spe_wt, function(x) x[, x[1, ] < -0.1 & x[2, ] < 0.05])
cat("WT-specific aging genes: up (contrast > 0.1, pvalue < 0.05) \n")
sapply(geno_spe_wt_up, function(x) ncol(x))
cat("WT-specific aging genes: down (contrast < -0.1, pvalue < 0.05) \n")
sapply(geno_spe_wt_dn, function(x) ncol(x))
glmList <- list()
glmList$age_spe_up <- age_spe_up
glmList$age_spe_dn <- age_spe_dn
glmList$geno_spe_wt_up <- geno_spe_wt_up
glmList$geno_spe_wt_dn <- geno_spe_wt_dn
save(glmList, file = "data/glmList.rdt")
cat("test")
8793 * 0.05
1 - 0.05^8793
0.95^(1/8793)
0.05^(1/8793)
0.05 / 8793
0.05^(1/8793)
1-0.05^(1/8793)
1-0.95^(1/8793)
alphas <- seq(0,0.25,0.01)
lapply(1:10, function(x) plot(alphas / x, 1-(1-alphas)^(1/x)))
par(mar = c(5, 4, 4, 2))
lapply(1:10, function(x) plot(alphas / x, 1-(1-alphas)^(1/x)))
x = 10
alphas / x
1-(1-alphas)^(1/x)
pvals <- runif(8793,0,1)
hist(pvals)
bf = 0.05 / 8793
sd = 1-(1-0.05)^(1/8793))
sd = 1-(1-0.05)^(1/8793)
sd
bf
set.seed(1)
y = repeat(10,000, {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
}
y = repeat(10,000, {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
})
y = repeat(10000, {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
})
set.seed(1)
y = repeat(10000, function() {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
})
x = min(runif(8793,0,1))
x
?repelat
?repeat
)
set.seed(1)
y = replicate(10000, function() {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
})
head(y)
set.seed(1)
y = replicate(10000, {
x = min(runif(8793,0,1))
c(x < bf, x < sd)
})
head(y)
dim(y)
mean(y[1, ])
mean(y[2, ])
1416 / 14 * 365
37000 * 1.3
2182.7 / 14 * 365
library(GSE5859Subset)
data(GSE5859Subset)
library(genefilter)
?rowttests
rm(list = ls())
data(GSE5859Subset)
dim(geneExpression)
colnames(geneExpression)
head(sampleInfo)
pval = rowttests(geneExpression, sampleInfo$group)
head(geneExpression)
rowttests(geneExpression[1:10, ], as.factor(sampleInfo$group))
pval = rowttests(geneExpression, as.factor(sampleInfo$group))
head(pval)
sum(pval$p.value < 0.05)
sum(pval$p.value / nrow(pval) < 0.05)
sum(pval$p.value * nrow(pval) < 0.05)
p.adjust(pval$p.value, method = "fdr")
sum(p.adjust(pval$p.value, method = "fdr") < 0.05)
?p.adjust
?qvalue
library("BiocInstaller", lib.loc="~/Library/R/3.1/library")
biocLite("qvalue")
library(qvalue)
?qvalue
sum(qvalue(pval$p.value) < 0.05)
qvalue(pval$p.value)
sum(qvalue(pval$p.value)$qvalues < 0.05)
qvalue(pval$p.value)$pi0
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))
pval
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
pval
?p.adjust
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
y <- list()
y$bonf = p.adjust(pval, method = "bonferroni")
y$fdr = p.adjust(pval, method = "fdr")
y$qval = qvalue(pval)
y$bonf
head(y$bonf)
sum(y$bonf[-c(1:500)])
sum(y$bonf[-c(1:500)] < 0.05)
sum(y$bonf[c(1:500)] < 0.05)
sum(y$bonf[c(1:500)] >= 0.05)
sum(y$bonf[c(1:500)] >= 0.05) / 500
sum(y$bonf[c(1:500)] < 0.05)
sum(y$bonf[-c(1:500)] < 0.05)
sum(y$bonf[-c(1:500)] < 0.05) / sum(y$bonf < 0.05)
sum(y$bonf[c(1:500)] >= 0.05) / sum(y$bonf >= 0.05)
sum(y$bonf[c(1:500)] >= 0.05) / 500
sum(y$fdr[-c(1:500)] >= 0.05) / sum(y$fdr)
sum(y$fdr[-c(1:500)] >= 0.05) / sum(y$fdr < 0.05)
sum(y$fdr < 0.05)
sum(y$fdr[-c(1:500)] < 0.05) / sum(y$fdr < 0.05)
sum(y$fdr[c(1:500)] >= 0.05) / 500
sum(y$qval[-c(1:500)] < 0.05) / sum(y$fdr < 0.05)
sum(y$qval[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / sum(y$fdr < 0.05)
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / sum(y$qval$qvalues < 0.05)
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
y <- list()
y$bonf = p.adjust(pval, method = "bonferroni")
y$fdr = p.adjust(pval, method = "fdr")
y$qval = qvalue(pval)
sum(y$bonf[-c(1:500)] < 0.05) / sum(y$bonf < 0.05)
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$fdr[-c(1:500)] < 0.05) / sum(y$fdr < 0.05)
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$bonf[c(1:500)] >= 0.05) / 500
sum(y$fdr[-c(1:500)] < 0.05) / sum(y$fdr < 0.05)
sum(y$fdr[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / sum(y$qval$qvalues < 0.05)
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$bonf[c(1:500)] >= 0.05) / 500
sum(y$fdr[-c(1:500)] < 0.05) / 8293
sum(y$fdr[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / 8293
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
head(y$bonf)
sum(y$bonf[c(1:500)] >= 0.05) / 500
head(y$fdr)
sum(y$fdr[-c(1:500)] < 0.05) / 8293
sum(y$fdr[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / 8293
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
y$qval = qvalue(pval)$qvalues
head(y$qval)
head(pval)
head(pval[-c(1:2)])
y$bonf = pval / 8793
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$bonf[-c(1:500)] < 0.05)
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
y$bonf = pval / 8793
sum(y$bonf[-c(1:500)] < 0.05)
y$bonf = pval * 8793
sum(y$bonf[-c(1:500)] < 0.05)
tail(pval)
set.seed(1)
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
y <- list()
y$bonf = p.adjust(pval, method = "bonferroni")
y$fdr = p.adjust(pval, method = "fdr")
y$qval = qvalue(pval)$qvalues
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$bonf[c(1:500)] >= 0.05) / 500
sum(y$fdr[-c(1:500)] < 0.05) / 8293
sum(y$fdr[c(1:500)] >= 0.05) / 500
sum(y$qval$qvalues[-c(1:500)] < 0.05) / 8293
sum(y$qval$qvalues[c(1:500)] >= 0.05) / 500
sum(y$qval[c(1:500)] >= 0.05) / 500
sum(y$qval[-c(1:500)] < 0.05) / 8293
sum(y$qval[c(1:500)] >= 0.05) / 500
sum(y$bonf[-c(1:500)] < 0.05)
set.seed(1)
replicate(1e3, {
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
y <- list()
y$bonf = p.adjust(pval, method = "bonferroni")
y$fdr = p.adjust(pval, method = "fdr")
y$qval = qvalue(pval)$qvalues
y
})
sum(y$bonf[-c(1:500)] < 0.05) / 8293
sum(y$qval[c(1:500)] >= 0.05) / 500
sum(y$qval[-c(1:500)] < 0.05)
(500 - sum(y$qval[c(1:500)] < 0.05)) / 500
bonf.fp = sum(p.adjust(pval, method = "bonferroni")[-c(1:500)] < 0.05) / 8293
bonf.fp
bonf.fn = sum(p.adjust(pval, method = "bonferroni")[c(1:500)] >= 0.05) / 500
bonf.fn
fdr.fp = sum(p.adjust(pval, method = "fdr")[-c(1:500)] < 0.05) / 8293
fdr.fp
fdr.fp = p.adjust(pval, method = "fdr")[c(1:500)] >= 0.05) / 500
fdr.fp = sum(p.adjust(pval, method = "fdr")[c(1:500)] >= 0.05) / 500
fdr.fp
y = replicate(1e3, {
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
bonf.fp = sum(p.adjust(pval, method = "bonferroni")[-c(1:500)] < 0.05) / 8293
bonf.fn = sum(p.adjust(pval, method = "bonferroni")[c(1:500)] >= 0.05) / 500
fdr.fp = sum(p.adjust(pval, method = "fdr")[-c(1:500)] < 0.05) / 8293
fdr.fn = sum(p.adjust(pval, method = "fdr")[c(1:500)] >= 0.05) / 500
qval = qvalue(pval)$qvalues
qval.fp = sum(qval[-c(1:500)] < 0.05) / 8293
qval.fn = sum(qval[c(1:500)] >= 0.05) / 500
c(bonf.fp, bonf.fn, fdr.fp, fdr.fn, qval.fp, qval.fn)
})
rowMeans(y)
set.seed(1)
y = replicate(1e3, {
n <- 24
m <- 8793
mat <- matrix(rnorm(n*m),m,n)
delta <- 2
positives <- 500
mat[1:positives,1:(n/2)] <- mat[1:positives,1:(n/2)]+delta
pval = rowttests(mat, as.factor(c(rep(1, 12), rep(2, 12))))$p.value
bonf.fp = sum(p.adjust(pval, method = "bonferroni")[-c(1:500)] < 0.05) / 8293
bonf.fn = sum(p.adjust(pval, method = "bonferroni")[c(1:500)] >= 0.05) / 500
fdr.fp = sum(p.adjust(pval, method = "fdr")[-c(1:500)] < 0.05) / 8293
fdr.fn = sum(p.adjust(pval, method = "fdr")[c(1:500)] >= 0.05) / 500
qval = qvalue(pval)$qvalues
qval.fp = sum(qval[-c(1:500)] < 0.05) / 8293
qval.fn = sum(qval[c(1:500)] >= 0.05) / 500
c(bonf.fp, bonf.fn, fdr.fp, fdr.fn, qval.fp, qval.fn)
})
rowMeans(y)
